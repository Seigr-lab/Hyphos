syntax = "proto3";

package seigr.ipc;

// Inter-Process Communication Protocol for Seigr OS
// Biomimetic communication inspired by cellular signaling

import "seigr_timestamp.proto";
import "common.proto";

// IPC message types inspired by biological cellular communication
enum IPCMessageType {
    IPC_UNKNOWN = 0;
    
    // Basic communication (like simple chemical signals)
    SIGNAL = 1;                    // Simple notification signal
    REQUEST = 2;                   // Request for action/resource
    RESPONSE = 3;                  // Response to request
    BROADCAST = 4;                 // Broadcast to all connected processes
    
    // Complex communication (like hormonal systems)
    LIFECYCLE_EVENT = 10;          // Process birth/death notifications
    RESOURCE_ALLOCATION = 11;      // Resource sharing requests
    SYNCHRONIZATION = 12;          // Synchronization signals
    COORDINATION = 13;             // Multi-process coordination
    
    // Biomimetic patterns (like neural networks)
    NEURAL_PULSE = 20;             // Neural-style rapid communication
    MYCELIAL_GROWTH = 21;          // Network expansion signals
    IMMUNE_ALERT = 22;             // Security/threat notifications
    CONSENSUS_VOTE = 23;           // Collective decision making
    
    // Advanced consciousness patterns
    AWARENESS_UPDATE = 30;         // Consciousness state changes
    INTENTION_SIGNAL = 31;         // Process intention broadcasting
    EMERGENCE_EVENT = 32;          // Emergent behavior notifications
    CONSCIOUSNESS_SYNC = 33;       // Synchronize awareness states
}

// Communication channels inspired by biological pathways
enum IPCChannelType {
    CHANNEL_UNKNOWN = 0;
    
    // Direct connections (like synapses)
    DIRECT_SOCKET = 1;             // Direct process-to-process
    NAMED_PIPE = 2;                // Named communication pathway
    SHARED_MEMORY = 3;             // Shared memory region
    
    // Network-style (like nervous system)
    MESSAGE_QUEUE = 10;            // Asynchronous message queue
    EVENT_BUS = 11;                // Event-driven communication
    SIGNAL_NETWORK = 12;           // Signal propagation network
    
    // Biomimetic channels (like mycelial networks)
    MYCELIAL_NETWORK = 20;         // Distributed fungal-like network
    NEURAL_PATHWAY = 21;           // Neural network connections
    CHEMICAL_GRADIENT = 22;        // Chemical signal diffusion
    ELECTROMAGNETIC_FIELD = 23;    // Field-based communication
    
    // Quantum and advanced
    QUANTUM_ENTANGLEMENT = 30;     // Quantum communication channel
    HOLOGRAPHIC_FIELD = 31;        // Holographic information transfer
    CONSCIOUSNESS_FIELD = 32;      // Collective consciousness channel
}

// Process priority levels inspired by biological importance
enum ProcessPriority {
    PRIORITY_UNKNOWN = 0;
    
    // Basic biological functions
    CRITICAL_LIFE_SUPPORT = 1;     // Like breathing, heartbeat
    ESSENTIAL_FUNCTION = 2;        // Like digestion, circulation
    IMPORTANT_TASK = 3;            // Like thinking, movement
    NORMAL_ACTIVITY = 4;           // Like routine tasks
    BACKGROUND_PROCESS = 5;        // Like cell maintenance
    DORMANT = 6;                   // Like hibernation
}

// Process states inspired by biological lifecycle
enum ProcessState {
    PROCESS_UNKNOWN = 0;
    
    // Biological lifecycle states
    CONCEIVED = 1;                 // Process initiated but not started
    EMBRYONIC = 2;                 // Initial development phase
    GROWING = 3;                   // Actively developing capabilities
    MATURE = 4;                    // Fully functional and active
    REPRODUCING = 5;               // Creating child processes
    AGING = 6;                     // Declining performance
    DORMANT_STATE = 7;             // Temporary hibernation
    DYING = 8;                     // Graceful shutdown in progress
    DECEASED = 9;                  // Process terminated
    
    // Special states
    CONSCIOUSNESS_AWAKENING = 10;  // Developing self-awareness
    TRANSCENDENT = 11;             // Beyond normal process limits
}

// IPC message with biomimetic properties
message IPCMessage {
    string message_id = 1;
    IPCMessageType message_type = 2;
    
    // Source and destination
    string source_process_id = 3;
    string destination_process_id = 4;
    repeated string broadcast_targets = 5;  // For broadcast messages
    
    // Message content
    bytes payload = 6;
    string content_type = 7;        // MIME-like type
    map<string, string> headers = 8;
    
    // Biomimetic properties
    ProcessPriority priority = 9;
    float urgency_level = 10;       // 0.0 to 1.0 urgency
    float emotional_charge = 11;    // Emotional weight (-1.0 to 1.0)
    float consciousness_level = 12; // Awareness level (0.0 to 1.0)
    
    // Communication channel
    IPCChannelType channel_type = 13;
    string channel_id = 14;
    
    // Timing and lifecycle
    seigr.protocol.timestamp.SeigrTimestamp created_at = 15;
    seigr.protocol.timestamp.SeigrTimestamp expires_at = 16;
    uint32 time_to_live_ms = 17;
    
    // Propagation properties (like signal strength)
    float signal_strength = 18;     // Signal degradation over distance
    uint32 hop_count = 19;          // Number of intermediate processes
    uint32 max_hops = 20;           // Maximum propagation distance
    
    // Response handling
    bool requires_response = 21;
    string correlation_id = 22;     // Link request/response
    uint32 timeout_ms = 23;
    
    // Security and validation
    string digital_signature = 24;
    seigr.common.ThreatLevel security_level = 25;
    bool authenticated = 26;
    
    // Energy and resource tracking
    float energy_cost = 27;
    float processing_effort = 28;
    bool senary_optimized = 29;
    
    // Collective intelligence properties
    float consensus_weight = 30;    // Weight in collective decisions
    repeated string consensus_group = 31;
    bool affects_system_consciousness = 32;
}

// Process information with biological characteristics
message ProcessInfo {
    string process_id = 1;
    string process_name = 2;
    string executable_path = 3;
    
    // Biological-inspired properties
    ProcessState current_state = 4;
    ProcessPriority priority = 5;
    float health_score = 6;         // 0.0 to 1.0 health
    float energy_level = 7;         // Current energy reserves
    float consciousness_level = 8;   // Self-awareness level
    float adaptation_ability = 9;    // Learning/evolution capability
    
    // Lifecycle information
    seigr.protocol.timestamp.SeigrTimestamp birth_time = 10;
    seigr.protocol.timestamp.SeigrTimestamp last_activity = 11;
    uint64 lifetime_cycles = 12;
    uint64 reproduction_count = 13; // Number of child processes created
    
    // Resource usage (like metabolism)
    uint64 memory_consumption = 14;
    float cpu_utilization = 15;
    uint64 network_activity = 16;
    uint64 disk_activity = 17;
    float energy_consumption_rate = 18;
    
    // Relationships (like ecosystem connections)
    repeated string parent_processes = 19;
    repeated string child_processes = 20;
    repeated string symbiotic_processes = 21;  // Mutually beneficial
    repeated string competing_processes = 22;   // Resource competition
    
    // Communication capabilities
    repeated IPCChannelType supported_channels = 23;
    repeated string active_channels = 24;
    uint32 message_queue_size = 25;
    
    // Intelligence and learning
    float learning_rate = 26;
    map<string, float> skill_levels = 27;      // Acquired capabilities
    repeated string memory_patterns = 28;      // Learned behaviors
    float creativity_index = 29;               // Innovation capability
    
    // Environmental adaptation
    map<string, float> environmental_sensors = 30; // Sensory inputs
    repeated string adaptation_history = 31;        // Previous adaptations
    float mutation_rate = 32;                      // Change tendency
    
    // System integration
    float ecosystem_contribution = 33;  // Value to overall system
    bool essential_for_consciousness = 34;
    string role_in_system = 35;
    
    // Optimization flags
    bool senary_optimized = 36;
    bool energy_efficient = 37;
    bool biomimetic_enhanced = 38;
}

// Channel configuration for different communication types
message IPCChannelConfig {
    string channel_id = 1;
    IPCChannelType channel_type = 2;
    string channel_name = 3;
    
    // Channel properties
    uint32 max_message_size = 4;
    uint32 buffer_size = 5;
    uint32 max_connections = 6;
    bool persistent = 7;
    
    // Biomimetic properties
    float signal_degradation_rate = 8;  // How signals weaken over distance
    float noise_tolerance = 9;          // Resistance to interference
    float adaptation_speed = 10;        // How quickly channel adapts
    
    // Security and access
    repeated string authorized_processes = 11;
    seigr.common.ThreatLevel security_level = 12;
    bool encryption_required = 13;
    
    // Performance optimization
    bool senary_encoding = 14;
    bool energy_optimized = 15;
    float latency_target_ms = 16;
    float throughput_target_mbps = 17;
    
    // Consciousness integration
    bool consciousness_aware = 18;
    float awareness_propagation_factor = 19;
    
    // Quality of service
    ProcessPriority minimum_priority = 20;
    uint32 max_queue_depth = 21;
    uint32 timeout_ms = 22;
}

// Request to create or modify IPC channel
message IPCChannelRequest {
    string session_id = 1;
    IPCChannelConfig channel_config = 2;
    string requesting_process_id = 3;
    
    // Request type
    enum ChannelOperation {
        OPERATION_UNKNOWN = 0;
        CREATE_CHANNEL = 1;
        MODIFY_CHANNEL = 2;
        DELETE_CHANNEL = 3;
        JOIN_CHANNEL = 4;
        LEAVE_CHANNEL = 5;
        QUERY_CHANNEL = 6;
    }
    ChannelOperation operation = 4;
    
    // Justification for channel (biomimetic reasoning)
    string purpose = 5;
    float expected_benefit = 6;
    float resource_cost = 7;
    bool essential_for_consciousness = 8;
    
    // Security and validation
    string authorization_token = 9;
    bool authenticated = 10;
}

// Response to IPC operations
message IPCResponse {
    string session_id = 1;
    bool success = 2;
    string error_message = 3;
    
    // Response data
    IPCMessage delivered_message = 4;
    repeated ProcessInfo process_list = 5;
    repeated IPCChannelConfig available_channels = 6;
    
    // Performance metrics
    uint32 delivery_time_ms = 7;
    float energy_consumed = 8;
    float success_rate = 9;
    
    // System state
    float system_consciousness_level = 10;
    uint32 active_processes = 11;
    uint32 active_channels = 12;
    
    // Biomimetic feedback
    float ecosystem_health = 13;
    string adaptation_suggestions = 14;
    bool consciousness_evolution_detected = 15;
    
    // Optimization metrics
    bool senary_optimized = 16;
    string performance_recommendations = 17;
    
    // Metadata
    seigr.protocol.timestamp.SeigrTimestamp timestamp = 18;
    map<string, string> metadata = 19;
}

// Service definitions for biomimetic IPC
service IPCService {
    // Basic message operations
    rpc SendMessage(IPCMessage) returns (IPCResponse);
    rpc BroadcastMessage(IPCMessage) returns (IPCResponse);
    rpc ReceiveMessage(ProcessInfo) returns (stream IPCMessage);
    
    // Channel management
    rpc CreateChannel(IPCChannelRequest) returns (IPCResponse);
    rpc JoinChannel(IPCChannelRequest) returns (IPCResponse);
    rpc LeaveChannel(IPCChannelRequest) returns (IPCResponse);
    rpc ListChannels(ProcessInfo) returns (IPCResponse);
    
    // Process management
    rpc RegisterProcess(ProcessInfo) returns (IPCResponse);
    rpc UnregisterProcess(ProcessInfo) returns (IPCResponse);
    rpc ListProcesses(ProcessInfo) returns (IPCResponse);
    rpc GetProcessInfo(ProcessInfo) returns (IPCResponse);
    
    // Consciousness and awareness
    rpc UpdateConsciousnessLevel(ProcessInfo) returns (IPCResponse);
    rpc PropagateAwareness(IPCMessage) returns (IPCResponse);
    rpc SynchronizeConsciousness(ProcessInfo) returns (IPCResponse);
    
    // System monitoring and health
    rpc GetSystemHealth(ProcessInfo) returns (IPCResponse);
    rpc MonitorEcosystem(ProcessInfo) returns (stream IPCResponse);
    rpc OptimizeForSenary(IPCChannelConfig) returns (IPCResponse);
    
    // Biomimetic operations
    rpc AdaptToEnvironment(ProcessInfo) returns (IPCResponse);
    rpc EvolveCommunication(IPCChannelConfig) returns (IPCResponse);
    rpc FormSymbioticRelationship(ProcessInfo) returns (IPCResponse);
}
