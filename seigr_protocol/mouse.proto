syntax = "proto3";

package seigr.mouse;

// Mouse input protocol for comprehensive pointer device handling
// Supports traditional mice, trackpads, pointing sticks, and advanced input devices

// Mouse button types
enum MouseButton {
    BUTTON_UNKNOWN = 0;
    LEFT_BUTTON = 1;
    RIGHT_BUTTON = 2;
    MIDDLE_BUTTON = 3;
    BUTTON_4 = 4;               // Back button
    BUTTON_5 = 5;               // Forward button
    WHEEL_UP = 10;              // Scroll wheel up
    WHEEL_DOWN = 11;            // Scroll wheel down
    WHEEL_LEFT = 12;            // Horizontal scroll left
    WHEEL_RIGHT = 13;           // Horizontal scroll right
    TILT_LEFT = 14;             // Trackball/wheel tilt
    TILT_RIGHT = 15;            // Trackball/wheel tilt
}

// Mouse button states
enum ButtonState {
    BUTTON_RELEASED = 0;
    BUTTON_PRESSED = 1;
    BUTTON_HELD = 2;            // Held down for dragging
    BUTTON_DOUBLE_CLICK = 3;
    BUTTON_TRIPLE_CLICK = 4;
}

// Mouse movement types
enum MovementType {
    MOVEMENT_UNKNOWN = 0;
    RELATIVE_MOVEMENT = 1;      // Standard mouse movement
    ABSOLUTE_POSITION = 2;      // Tablet/touchscreen style
    GESTURE_MOVEMENT = 3;       // Trackpad gestures
    PRECISION_MOVEMENT = 4;     // High-precision mode
}

// Mouse device types
enum MouseDeviceType {
    DEVICE_UNKNOWN = 0;
    OPTICAL_MOUSE = 1;
    LASER_MOUSE = 2;
    TRACKBALL = 3;
    TRACKPAD = 4;
    POINTING_STICK = 5;
    GRAPHICS_TABLET = 10;
    STYLUS = 11;
    TOUCH_MOUSE = 12;           // Touch-sensitive mouse surface
    NEURAL_POINTER = 13;        // Neural interface pointing
}

// Coordinate with precision and timing
message MouseCoordinate {
    float x = 1;
    float y = 2;
    uint64 timestamp_ns = 3;
    
    // Movement characteristics
    float velocity_x = 4;
    float velocity_y = 5;
    float acceleration_x = 6;
    float acceleration_y = 7;
    
    // Precision and pressure (for supported devices)
    float pressure = 8;         // 0.0 to 1.0
    float tilt_x = 9;          // Stylus tilt
    float tilt_y = 10;         // Stylus tilt
    float rotation = 11;        // Stylus rotation
    
    // Context
    MovementType movement_type = 12;
    bool high_precision = 13;
    
    // Energy tracking
    float energy_cost = 14;
    bool senary_optimized = 15;
}

// Mouse button event
message MouseButtonEvent {
    string event_id = 1;
    MouseButton button = 2;
    ButtonState state = 3;
    MouseCoordinate position = 4;
    
    // Click characteristics
    uint32 click_count = 5;     // For double/triple clicks
    uint32 hold_duration_ms = 6;
    
    // Context
    string target_element_id = 7;
    repeated string modifier_keys = 8; // Ctrl+click, etc.
    
    // Device context
    string mouse_id = 9;
    MouseDeviceType device_type = 10;
    
    // Performance
    float processing_energy = 11;
    bool senary_optimized = 12;
    
    // Accessibility
    bool accessibility_enhanced = 13;
    string accessibility_action = 14;
}

// Mouse movement event
message MouseMovementEvent {
    string event_id = 1;
    MouseCoordinate start_position = 2;
    MouseCoordinate end_position = 3;
    repeated MouseCoordinate movement_path = 4; // For complex movements
    
    // Movement characteristics
    float total_distance = 5;
    float average_velocity = 6;
    uint32 movement_duration_ms = 7;
    
    // Movement context
    bool is_dragging = 8;
    MouseButton drag_button = 9;
    string drag_target_id = 10;
    
    // Device and optimization
    string mouse_id = 11;
    MovementType movement_type = 12;
    bool senary_optimized = 13;
    float energy_consumed = 14;
}

// Mouse scroll/wheel event
message MouseScrollEvent {
    string event_id = 1;
    MouseButton scroll_direction = 2; // WHEEL_UP, WHEEL_DOWN, etc.
    float scroll_delta = 3;          // Amount scrolled
    MouseCoordinate position = 4;
    
    // Scroll characteristics
    bool smooth_scrolling = 5;
    float scroll_velocity = 6;
    uint32 scroll_duration_ms = 7;
    
    // Context
    string scroll_target_id = 8;
    bool horizontal_scroll = 9;
    repeated string modifier_keys = 10;
    
    // Device and performance
    string mouse_id = 11;
    float energy_cost = 12;
    bool senary_optimized = 13;
    
    // Accessibility
    bool accessibility_scroll = 14;
    float accessibility_multiplier = 15;
}

// Complex mouse gesture (for trackpads, advanced mice)
message MouseGesture {
    string gesture_id = 1;
    string gesture_type = 2;     // "pinch", "rotate", "swipe", "custom"
    repeated MouseCoordinate gesture_path = 3;
    
    // Gesture characteristics
    float gesture_magnitude = 4;
    float gesture_velocity = 5;
    uint32 gesture_duration_ms = 6;
    string gesture_direction = 7;
    
    // Multi-touch context (for trackpads)
    uint32 finger_count = 8;
    repeated MouseCoordinate finger_positions = 9;
    
    // Recognition confidence
    float confidence = 10;
    bool gesture_complete = 11;
    
    // Device context
    string device_id = 12;
    MouseDeviceType device_type = 13;
    
    // Performance
    float processing_energy = 14;
    bool senary_optimized = 15;
}

// Mouse configuration and settings
message MouseConfiguration {
    string mouse_id = 1;
    string device_name = 2;
    MouseDeviceType device_type = 3;
    
    // Sensitivity and acceleration
    float sensitivity = 4;       // DPI or sensitivity multiplier
    float acceleration = 5;      // Mouse acceleration curve
    bool acceleration_enabled = 6;
    
    // Button configuration
    map<string, string> button_mappings = 7; // Custom button assignments
    bool swap_left_right = 8;    // Left-handed mode
    
    // Scroll settings
    uint32 scroll_lines = 9;     // Lines per scroll wheel click
    bool reverse_scroll = 10;    // Natural scrolling
    bool smooth_scrolling = 11;
    
    // Double-click and timing
    uint32 double_click_speed_ms = 12;
    uint32 drag_threshold_pixels = 13;
    
    // Precision settings
    bool high_precision_mode = 14;
    float precision_sensitivity = 15;
    bool pointer_acceleration = 16;
    
    // Energy optimization
    bool energy_optimization_enabled = 17;
    float energy_budget = 18;
    uint32 idle_timeout_ms = 19;
    
    // Senary optimization
    bool senary_mode_enabled = 20;
    float senary_efficiency_target = 21;
    
    // Accessibility
    bool accessibility_enabled = 22;
    float accessibility_sensitivity = 23;
    bool click_lock_enabled = 24;    // Click and hold without holding button
    bool hover_click_enabled = 25;   // Click by hovering
}

// Mouse capabilities and specifications
message MouseCapabilities {
    string mouse_id = 1;
    string manufacturer = 2;
    string model = 3;
    string firmware_version = 4;
    
    // Physical characteristics
    repeated MouseButton available_buttons = 5;
    bool has_scroll_wheel = 6;
    bool has_horizontal_scroll = 7;
    bool has_tilt_wheel = 8;
    
    // Sensor specifications
    uint32 max_dpi = 9;
    uint32 min_dpi = 10;
    repeated uint32 supported_dpi_levels = 11;
    uint32 polling_rate_hz = 12;
    
    // Tracking characteristics
    uint32 max_tracking_speed_ips = 13; // Inches per second
    uint32 max_acceleration_g = 14;
    string sensor_type = 15;            // "optical", "laser", "hybrid"
    
    // Advanced features
    bool programmable_buttons = 16;
    bool adjustable_weight = 17;
    bool rgb_lighting = 18;
    bool wireless = 19;
    uint32 battery_life_hours = 20;    // For wireless mice
    
    // Surface compatibility
    repeated string compatible_surfaces = 21;
    bool works_on_glass = 22;
    
    // Gesture support
    bool gesture_support = 23;
    repeated string supported_gestures = 24;
    bool multi_touch = 25;             // For trackpads
    
    // Connectivity
    string connection_type = 26;        // "USB", "Bluetooth", "Wireless", etc.
    bool hot_swappable = 27;
    
    // Seigr-specific features
    bool senary_optimization_support = 28;
    bool energy_reporting_available = 29;
    bool neural_interface_compatible = 30;
    
    // Performance characteristics
    float latency_ms = 31;
    uint32 click_lifetime = 32;        // Expected button lifetime
    string tracking_surface_requirements = 33;
}

// Mouse input request for processing
message MouseInputRequest {
    string session_id = 1;
    repeated MouseButtonEvent button_events = 2;
    repeated MouseMovementEvent movement_events = 3;
    repeated MouseScrollEvent scroll_events = 4;
    repeated MouseGesture gestures = 5;
    
    // Processing context
    string application_context = 6;
    string ui_element_context = 7;
    bool high_precision_required = 8;
    
    // Energy constraints
    float max_processing_energy = 9;
    uint32 max_processing_time_ms = 10;
    
    // Optimization preferences
    bool senary_optimization_enabled = 11;
    bool accessibility_enhanced = 12;
    
    // Security context
    string security_level = 13;
    bool input_monitoring_enabled = 14;
}

// Mouse input response
message MouseInputResponse {
    string session_id = 1;
    bool success = 2;
    string error_message = 3;
    
    // Processed results
    repeated string actions_triggered = 4;
    string cursor_final_position = 5;
    repeated string ui_elements_affected = 6;
    
    // Input analysis
    uint32 total_button_clicks = 7;
    float total_distance_moved = 8;
    uint32 total_scroll_amount = 9;
    uint32 gestures_recognized = 10;
    
    // Performance metrics
    uint32 processing_time_ms = 11;
    float energy_consumed = 12;
    bool senary_optimized = 13;
    
    // User feedback
    bool requires_confirmation = 14;
    string feedback_message = 15;
    
    // Session metadata
    string timestamp = 16;
    map<string, string> metadata = 17;
}

// Mouse service definitions
service MouseService {
    // Input processing
    rpc ProcessMouseInput(MouseInputRequest) returns (MouseInputResponse);
    rpc ProcessButtonEvent(MouseButtonEvent) returns (MouseInputResponse);
    rpc ProcessMovementEvent(MouseMovementEvent) returns (MouseInputResponse);
    rpc ProcessScrollEvent(MouseScrollEvent) returns (MouseInputResponse);
    rpc ProcessGesture(MouseGesture) returns (MouseInputResponse);
    
    // Configuration management
    rpc GetMouseConfiguration(MouseConfiguration) returns (MouseConfiguration);
    rpc UpdateMouseConfiguration(MouseConfiguration) returns (MouseInputResponse);
    rpc GetMouseCapabilities(MouseCapabilities) returns (MouseCapabilities);
    
    // Calibration and setup
    rpc CalibrateMouse(MouseConfiguration) returns (MouseInputResponse);
    rpc TestMouseInput(MouseInputRequest) returns (MouseInputResponse);
    
    // Gesture management
    rpc RegisterCustomGesture(MouseGesture) returns (MouseInputResponse);
    rpc RemoveCustomGesture(MouseGesture) returns (MouseInputResponse);
    rpc ListAvailableGestures(MouseCapabilities) returns (MouseInputResponse);
    
    // Optimization and analysis
    rpc OptimizeForSenary(MouseConfiguration) returns (MouseConfiguration);
    rpc AnalyzeUsagePattern(MouseInputRequest) returns (MouseInputResponse);
    rpc CalculateEnergyConsumption(MouseInputRequest) returns (MouseInputResponse);
}
