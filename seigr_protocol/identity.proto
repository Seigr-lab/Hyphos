syntax = "proto3";

package seigr;

import "access_control.proto"; // For seigr.access_control.AccessPolicy

/**
 * Identity Protocol
 * 
 * Defines structures and enums for managing identity creation, verification,
 * auditing, and privacy across the Seigr ecosystem. Supports user, device,
 * and system identities with advanced security and privacy controls.
 */

// ===========================
// ENUMS
// ===========================

/**
 * Enum representing the current status of an identity.
 */
enum IdentityStatus {
    IDENTITY_STATUS_UNDEFINED = 0;          // Default undefined status.
    IDENTITY_ACTIVE = 1;                    // Identity is active and operational.
    IDENTITY_SUSPENDED = 2;                 // Identity is temporarily suspended.
    IDENTITY_REVOKED = 3;                   // Identity is permanently revoked.
    IDENTITY_PENDING_VERIFICATION = 4;      // Identity is pending verification.
    IDENTITY_EXPIRED = 5;                   // Identity has expired.
}

/**
 * Enum defining types of identities in the Seigr ecosystem.
 */
enum IdentityType {
    IDENTITY_TYPE_UNDEFINED = 0;            // Undefined identity type.
    IDENTITY_USER = 1;                      // User identity (e.g., individual account).
    IDENTITY_SENSOR = 2;                    // Sensor identity for IoT devices.
    IDENTITY_SERVER = 3;                    // Server or infrastructure identity.
    IDENTITY_APPLICATION = 4;               // Application-level identity.
    IDENTITY_DEVICE = 5;                    // Device identity (e.g., hardware).
}

/**
 * Enum specifying privacy levels for identities.
 */
enum PrivacyLevel {
    PRIVACY_PUBLIC = 0;                     // Publicly accessible identity.
    PRIVACY_PARTIAL_TRACE = 1;              // Identity traceable with partial exposure.
    PRIVACY_SEMI_ANONYMOUS = 2;             // Semi-anonymous identity.
    PRIVACY_FULL_ANONYMOUS = 3;             // Fully anonymous identity.
    PRIVACY_SELECTIVE_EXPOSURE = 4;         // Identity with selective exposure of attributes.
}

/**
 * Enum specifying the verification trust level of an identity.
 */
enum VerificationLevel {
    VERIFICATION_LEVEL_UNDEFINED = 0;       // Undefined verification level.
    VERIFICATION_LOW_TRUST = 1;             // Low trust level.
    VERIFICATION_MEDIUM_TRUST = 2;          // Medium trust level.
    VERIFICATION_HIGH_TRUST = 3;            // High trust level.
    VERIFICATION_ADMIN_VERIFIED = 4;        // Verified by an administrator.
    VERIFICATION_CUSTOM = 5;                // Custom verification logic.
}

// ===========================
// ALIAS IDENTITY
// ===========================

/**
 * Represents an alias identity associated with a primary identity.
 */
message AliasIdentity {
    string alias_id = 1;                                    // Unique identifier for the alias.
    IdentityStatus status = 2;                              // Status of the alias.
    PrivacyLevel privacy_level = 3;                         // Privacy level for the alias.
    IdentityType identity_type = 4;                         // Type of the alias identity.
    string alias_name = 5;                                  // Descriptive name for the alias.
    string alias_signature = 6;                             // Cryptographic signature for the alias.
    repeated seigr.access_control.AccessPolicy access_policies = 7; // Associated access policies.
    map<string, string> metadata = 8;                       // Additional metadata for context.
    string expiration_timestamp = 9;                        // Expiration timestamp for the alias.
    repeated string related_aliases = 10;                   // Related aliases for grouping.
    string traceability_level = 11;                         // Traceability details.
}

// ===========================
// IDENTITY AUDIT LOG
// ===========================

/**
 * Logs actions performed on an identity for auditing purposes.
 */
message IdentityAuditLog {
    string action = 1;                                      // Action performed (e.g., "CREATED", "SUSPENDED").
    string performed_by = 2;                                // ID of the user/system performing the action.
    string timestamp = 3;                                   // Timestamp of the action.
    string status = 4;                                      // Status after the action.
    string details = 5;                                     // Detailed description of the action.
    map<string, string> metadata = 6;                       // Metadata for contextual details.
    map<string, string> action_details = 7;                 // Additional details specific to the action.
    string compliance_tag = 8;                              // Compliance-related tags (e.g., "GDPR").
}

// ===========================
// MAIN IDENTITY
// ===========================

/**
 * Represents a primary identity within the Seigr ecosystem.
 */
message SeigrIdentityData {
    int64 creation_timestamp = 1;                           // Timestamp when the identity was created.
    IdentityType identity_type = 2;                         // Type of the identity.
    IdentityStatus status = 3;                              // Current status of the identity.

    bytes senary_id = 4;                                    // Unique Senary ID for the identity.
    bytes owner_public_key = 5;                             // Public key of the identity owner.
    bytes encrypted_private_key = 6;                        // Encrypted private key for secure storage.
    bytes owner_signature = 7;                              // Cryptographic signature of the owner.

    bool revoked = 8;                                       // Whether the identity is revoked.
    string revocation_reason = 9;                           // Reason for revocation, if applicable.
    VerificationLevel verification_level = 10;              // Trust level assigned to the identity.
    map<string, string> verification_metadata = 11;         // Metadata for verification details.

    repeated seigr.access_control.AccessPolicy access_policies = 12; // Associated access policies.
    repeated IdentityAuditLog audit_logs = 13;              // Logs for auditing identity actions.
    string version = 14;                                    // Version of the identity schema.
    map<string, string> metadata = 15;                      // Additional metadata.

    bytes encryption_key = 16;                              // Encryption key for secure operations.
    string usb_path = 17;                                   // USB path for hardware-based access.
    bool usb_required = 18;                                 // Indicates if USB access is mandatory.
    string last_used_timestamp = 19;                        // Timestamp when the identity was last used.
    map<string, string> security_parameters = 20;           // Security-specific configurations.
    bool multi_factor_enabled = 21;                         // Whether multi-factor authentication is enabled.
    string security_policy_id = 22;                         // Associated security policy identifier.

    repeated AliasIdentity aliases = 23;                    // List of associated aliases.
    string expiration_timestamp = 24;                       // Expiration timestamp for the identity.
    string reactivation_code = 25;                          // Reactivation code for expired identities.
    string key_rotation_schedule = 26;                      // Schedule for key rotation (e.g., "annually").
    PrivacyLevel default_privacy_level = 27;                // Default privacy level for the identity.
}

// ===========================
// IDENTITY REQUESTS AND RESPONSES
// ===========================

/**
 * Message for requesting identity-related operations.
 */
message IdentityRequest {
    string request_id = 1;                                  // Unique request identifier.
    string operation = 2;                                   // Operation type (e.g., "create", "verify").
    bytes identity_id = 3;                                  // Target identity ID.
    bytes public_key = 4;                                   // Public key for verification.
    bytes signature = 5;                                    // Request signature for authentication.
    map<string, string> parameters = 6;                     // Operation-specific parameters.
    string timestamp = 7;                                   // Request timestamp.
    string source = 8;                                      // Source of the request.
}

/**
 * Response to identity-related requests.
 */
message IdentityResponse {
    string response_id = 1;                                 // Unique response identifier.
    string request_id = 2;                                  // Original request ID.
    bool success = 3;                                       // Whether the operation was successful.
    string message = 4;                                     // Response message.
    bytes identity_id = 5;                                  // Affected identity ID.
    SeigrIdentityData identity_data = 6;                    // Full identity data if requested.
    map<string, string> additional_data = 7;                // Additional response data.
    string timestamp = 8;                                   // Response timestamp.
    bytes signature = 9;                                    // Response signature for verification.
}

/**
 * Request for revoking an identity.
 */
message IdentityRevocationRequest {
    string identity_id = 1;                                 // ID of the identity to revoke.
    bytes public_key = 2;                                   // Public key of the identity.
    string reason = 3;                                      // Reason for revocation.
    bytes signature = 4;                                    // Signature authorizing the revocation.
    string timestamp = 5;                                   // Timestamp of the revocation request.
    string revocation_authority = 6;                        // Entity requesting the revocation.
    bool permanent = 7;                                     // Whether the revocation is permanent.
    map<string, string> metadata = 8;                       // Additional revocation metadata.
}

/**
 * Response to an identity revocation request.
 */
message IdentityRevocationResponse {
    string response_id = 1;                                 // Unique response identifier.
    string request_id = 2;                                  // Original revocation request ID.
    bool success = 3;                                       // Whether the revocation was successful.
    string message = 4;                                     // Status message about the revocation.
    string identity_id = 5;                                 // ID of the revoked identity.
    string timestamp = 6;                                   // Timestamp of the revocation.
    bytes signature = 7;                                    // Signature of the authority confirming revocation.
}

// ===========================
// OFFLINE IDENTITY
// ===========================

/**
 * Represents an offline identity that can be stored securely and used without network connectivity.
 * Provides enhanced security for cold storage and air-gapped operations.
 */
message OfflineIdentityData {
    string identity_id = 1;                                 // Unique identifier for the offline identity
    bytes encrypted_identity_data = 2;                      // Encrypted SeigrIdentityData
    bytes encryption_metadata = 3;                          // Metadata for encryption (e.g., IV, salt)
    int64 creation_timestamp = 4;                           // When the offline identity was created
    int64 last_modified_timestamp = 5;                      // When the offline identity was last modified
    string version = 6;                                     // Schema version of the offline identity
    bytes validation_hash = 7;                              // Hash for validating data integrity
    string storage_location = 8;                            // Location identifier (e.g., "usb://device1")
    bool requires_hardware_auth = 9;                        // Whether hardware authentication is required
    map<string, string> metadata = 10;                      // Additional metadata for the offline identity
    bytes recovery_data = 11;                               // Optional recovery information
    bool is_primary = 12;                                   // Whether this is a primary offline identity
    IdentityType identity_type = 13;                        // Type of the identity
    repeated string access_methods = 14;                    // Methods allowed to access this identity
    bytes auth_signature = 15;                              // Signature validating this offline identity
}

// ===========================
// MULTI-DEVICE SYNCHRONIZATION
// ===========================

/**
 * Enum defining types of identity synchronization operations.
 */
enum SyncType {
    SYNC_TYPE_UNDEFINED = 0;                // Undefined sync operation
    SYNC_TYPE_FULL = 1;                     // Full identity synchronization
    SYNC_TYPE_INCREMENTAL = 2;              // Incremental updates only
    SYNC_TYPE_METADATA_ONLY = 3;            // Only synchronize metadata
    SYNC_TYPE_VERIFICATION_ONLY = 4;        // Only synchronize verification status
    SYNC_TYPE_EMERGENCY_RECOVERY = 5;       // Emergency recovery synchronization
}

/**
 * Request for synchronizing identity data between devices.
 */
message IdentitySyncRequest {
    string request_id = 1;                                  // Unique identifier for the sync request
    string source_device_id = 2;                            // Device initiating the sync
    string target_device_id = 3;                            // Target device for synchronization
    SyncType sync_type = 4;                                 // Type of synchronization to perform
    int64 timestamp = 5;                                    // When the sync was requested
    bytes identity_data_hash = 6;                           // Hash of the identity data being synced
    bytes signature = 7;                                    // Cryptographic signature authorizing sync
    string session_id = 8;                                  // Session identifier for multi-step sync
    bool force_sync = 9;                                    // Whether to force sync despite conflicts
    map<string, string> sync_parameters = 10;               // Additional sync parameters
    repeated string data_segments = 11;                     // Identifiers for partial data segments
    int32 sequence_number = 12;                             // Sequence number for multi-part syncs
    int32 total_sequences = 13;                             // Total sequences in a multi-part sync
    bytes encrypted_auth_token = 14;                        // Encrypted authentication token
}

/**
 * Response to an identity synchronization request.
 */
message IdentitySyncResponse {
    string response_id = 1;                                 // Unique identifier for the sync response
    string request_id = 2;                                  // ID of the original sync request
    bool success = 3;                                       // Whether the sync was successful
    string message = 4;                                     // Status message about the synchronization
    SyncType sync_type = 5;                                 // Type of synchronization performed
    int64 timestamp = 6;                                    // When the response was generated
    bytes signature = 7;                                    // Signature of the responding device
    string session_id = 8;                                  // Session identifier matching the request
    map<string, string> sync_results = 9;                   // Results of the synchronization
    bool conflicts_detected = 10;                           // Whether conflicts were detected
    repeated string conflict_details = 11;                  // Details about any detected conflicts
    int32 sequence_number = 12;                             // Current sequence in multi-part response
    int32 total_sequences = 13;                             // Total sequences in multi-part response
    bytes confirmation_token = 14;                          // Token confirming successful sync
}

// ===========================
// TRUST SCORING
// ===========================

/**
 * Message representing a trust score report for an identity.
 */
message TrustScoreReport {
    string identity_id = 1;                   // The Seigr ID of the identity being scored
    int32 trust_score = 2;                    // Numeric trust score (typically 0-100)
    int64 timestamp = 3;                      // When the score was calculated
    repeated string trust_factors = 4;        // Factors that influenced the trust score
    map<string, float> factor_weights = 5;    // Weights of different trust factors
    string evaluation_context = 6;            // Context in which trust was evaluated
    bytes signature = 7;                      // Cryptographic signature of the report
    string issuer_id = 8;                     // ID of the entity that issued this report
    IdentityStatus status = 9;                // Current status of the identity
    map<string, string> metadata = 10;        // Additional metadata related to trust score
}

/**
 * Message for trust score validation requests.
 */
message TrustScoreValidationRequest {
    string identity_id = 1;                   // The Seigr ID to validate
    string validator_id = 2;                  // ID of the validating entity
    int64 timestamp = 3;                      // Request timestamp
    bytes signature = 4;                      // Request signature
}

/**
 * Message for trust score validation responses.
 */
message TrustScoreValidationResponse {
    bool is_valid = 1;                        // Whether the trust score is valid
    TrustScoreReport report = 2;              // The validated trust score report
    string validation_message = 3;            // Additional validation information
    int64 timestamp = 4;                      // Response timestamp
    bytes signature = 5;                      // Response signature
}
