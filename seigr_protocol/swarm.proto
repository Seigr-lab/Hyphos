syntax = "proto3";

package seigr.swarm;

// Swarm Intelligence Protocol for Seigr OS
// Biomimetic collective intelligence inspired by ant colonies, bee swarms, and neural networks

import "seigr_timestamp.proto";
import "common.proto";

// Types of swarm intelligence inspired by natural collective behaviors
enum SwarmIntelligenceType {
    SWARM_TYPE_UNKNOWN = 0;
    
    // Biological swarm types
    ANT_COLONY = 1;                    // Ant colony optimization patterns
    BEE_SWARM = 2;                     // Bee swarm decision making
    BIRD_FLOCK = 3;                    // Flocking behavior patterns
    FISH_SCHOOL = 4;                   // Schooling coordination
    WOLF_PACK = 5;                     // Pack hunting strategies
    BACTERIAL_COLONY = 6;              // Bacterial quorum sensing
    
    // Neural and cognitive swarms
    NEURAL_NETWORK = 10;               // Distributed neural processing
    BRAIN_HEMISPHERE = 11;             // Left/right brain coordination
    CONSCIOUSNESS_COLLECTIVE = 12;     // Collective consciousness
    MEMORY_NETWORK = 13;               // Distributed memory systems
    
    // Technical swarm types
    DISTRIBUTED_COMPUTING = 20;        // Distributed computation
    CONSENSUS_NETWORK = 21;            // Consensus-building systems
    OPTIMIZATION_SWARM = 22;           // Optimization algorithms
    SEARCH_SWARM = 23;                 // Distributed search
    DECISION_NETWORK = 24;             // Collective decision making
    
    // Advanced swarm types
    QUANTUM_SWARM = 30;                // Quantum collective intelligence
    HOLOGRAPHIC_SWARM = 31;            // Holographic information processing
    MULTIDIMENSIONAL_SWARM = 32;       // Higher-dimensional collectives
    CONSCIOUSNESS_MESH = 33;           // Consciousness network
}

// Roles within swarm inspired by natural hierarchies and specializations
enum SwarmRole {
    ROLE_UNKNOWN = 0;
    
    // Basic biological roles
    WORKER = 1;                        // Standard work performer
    SCOUT = 2;                         // Explorer and information gatherer
    GUARD = 3;                         // Security and protection
    NURSE = 4;                         // Maintenance and care
    FORAGER = 5;                       // Resource collector
    BUILDER = 6;                       // Structure creator
    
    // Leadership and coordination roles
    QUEEN = 10;                        // Primary coordinator
    ALPHA = 11;                        // Pack leader
    COORDINATOR = 12;                  // Task coordinator
    FACILITATOR = 13;                  // Communication facilitator
    MEDIATOR = 14;                     // Conflict resolver
    
    // Specialized cognitive roles
    ANALYZER = 20;                     // Data analysis specialist
    SYNTHESIZER = 21;                  // Information integration
    PREDICTOR = 22;                    // Future state prediction
    OPTIMIZER = 23;                    // Efficiency optimization
    INNOVATOR = 24;                    // Creative problem solving
    VALIDATOR = 25;                    // Quality assurance
    
    // Communication roles
    MESSENGER = 30;                    // Information carrier
    TRANSLATOR = 31;                   // Protocol translation
    BROADCASTER = 32;                  // Wide area communication
    LISTENER = 33;                     // Information gathering
    
    // Emergent roles
    EMERGENT_LEADER = 40;              // Spontaneously emerged leader
    SPECIALIST = 41;                   // Domain-specific expert
    CONNECTOR = 42;                    // Network bridge
    CATALYST = 43;                     // Change accelerator
}

// Swarm behavioral states inspired by collective behaviors
enum SwarmBehaviorState {
    BEHAVIOR_UNKNOWN = 0;
    
    // Formation and organization
    FORMING = 1;                       // Initial swarm formation
    ORGANIZING = 2;                    // Self-organization process
    STABILIZING = 3;                   // Reaching stable configuration
    OPTIMIZING = 4;                    // Optimizing performance
    
    // Activity states
    FORAGING = 10;                     // Resource gathering
    EXPLORING = 11;                    // Environment exploration
    EXPLOITING = 12;                   // Utilizing known resources
    MIGRATING = 13;                    // Moving to new location
    RESTING = 14;                      // Low activity state
    
    // Problem-solving states
    SEARCHING = 20;                    // Solution search
    CONVERGING = 21;                   // Converging on solution
    CONSENSUS_BUILDING = 22;           // Building agreement
    DECISION_MAKING = 23;              // Making collective decision
    IMPLEMENTING = 24;                 // Executing solution
    
    // Defensive and protective states
    ALERT = 30;                        // Heightened awareness
    DEFENSIVE = 31;                    // Protective formation
    ATTACKING = 32;                    // Coordinated offensive
    FLEEING = 33;                      // Coordinated escape
    HIDING = 34;                       // Concealment behavior
    
    // Advanced cognitive states
    LEARNING = 40;                     // Collective learning
    ADAPTING = 41;                     // Behavioral adaptation
    EVOLVING = 42;                     // Evolutionary change
    TRANSCENDING = 43;                 // Moving beyond current limits
    CONSCIOUSNESS_AWAKENING = 44;      // Emerging collective consciousness
}

// Swarm communication methods inspired by natural signaling
enum SwarmCommunicationType {
    COMMUNICATION_UNKNOWN = 0;
    
    // Chemical communication (like pheromones)
    PHEROMONE_TRAIL = 1;               // Trail-based guidance
    CHEMICAL_SIGNAL = 2;               // Direct chemical messaging
    SCENT_MARKING = 3;                 // Territory and state marking
    
    // Physical communication
    VIBRATION = 10;                    // Vibrational signaling
    MOVEMENT_PATTERN = 11;             // Dance and movement communication
    FORMATION_CHANGE = 12;             // Spatial arrangement signaling
    TOUCH_SIGNAL = 13;                 // Direct contact communication
    
    // Visual communication
    COLOR_CHANGE = 20;                 // Visual state indication
    LIGHT_PATTERN = 21;                // Bioluminescent signaling
    GESTURE_SIGNAL = 22;               // Movement-based signals
    
    // Digital communication
    DIRECT_MESSAGE = 30;               // Point-to-point messaging
    BROADCAST = 31;                    // Wide area broadcasting
    MULTICAST = 32;                    // Group messaging
    GOSSIP_PROTOCOL = 33;              // Rumor-based propagation
    
    // Advanced communication
    QUANTUM_ENTANGLEMENT = 40;         // Quantum communication
    CONSCIOUSNESS_LINK = 41;           // Direct consciousness connection
    FIELD_RESONANCE = 42;              // Field-based communication
    HOLOGRAPHIC_SIGNAL = 43;           // Holographic information transfer
}

// Individual swarm member (agent, process, or entity)
message SwarmMember {
    string member_id = 1;
    string member_name = 2;
    SwarmRole current_role = 3;
    repeated SwarmRole capable_roles = 4;
    
    // Physical/computational characteristics
    string member_type = 5;            // "process", "ai_agent", "hardware", etc.
    repeated string capabilities = 6;
    map<string, float> skill_levels = 7;
    float processing_capacity = 8;
    float energy_level = 9;
    
    // Position and state
    repeated float position = 10;       // Multi-dimensional position
    repeated float velocity = 11;       // Movement vector
    SwarmBehaviorState current_state = 12;
    float health_score = 13;           // Member health (0-1)
    float stress_level = 14;           // Current stress (0-1)
    
    // Cognitive characteristics
    float intelligence_level = 15;     // Cognitive capacity
    float learning_rate = 16;          // How quickly member learns
    float creativity_index = 17;       // Innovation capability
    float cooperation_tendency = 18;   // Willingness to cooperate
    float leadership_potential = 19;   // Leadership capability
    
    // Communication capabilities
    repeated SwarmCommunicationType supported_communications = 20;
    float communication_range = 21;    // Communication radius
    float signal_strength = 22;        // Communication power
    repeated string active_channels = 23;
    
    // Social relationships
    repeated string allies = 24;       // Cooperative relationships
    repeated string competitors = 25;   // Competitive relationships
    map<string, float> trust_levels = 26; // Trust in other members
    float social_influence = 27;       // Influence on others
    
    // Task and goal orientation
    repeated string current_tasks = 28;
    repeated string personal_goals = 29;
    map<string, float> goal_priorities = 30;
    float task_completion_rate = 31;
    
    // Adaptation and evolution
    repeated string learned_behaviors = 32;
    float adaptation_speed = 33;
    uint32 evolution_cycles = 34;
    bool evolving = 35;
    
    // Resource management
    map<string, float> resource_inventory = 36;
    repeated string resource_needs = 37;
    bool resource_sharing_enabled = 38;
    
    // Performance metrics
    float efficiency_score = 39;
    uint64 tasks_completed = 40;
    float contribution_to_swarm = 41;
    bool senary_optimized = 42;
    
    // Temporal characteristics
    seigr.protocol.timestamp.SeigrTimestamp join_time = 43;
    seigr.protocol.timestamp.SeigrTimestamp last_activity = 44;
    uint64 activity_cycles = 45;
    
    // Metadata
    map<string, string> metadata = 46;
}

// Swarm collective representing a group with collective intelligence
message SwarmCollective {
    string swarm_id = 1;
    string swarm_name = 2;
    SwarmIntelligenceType intelligence_type = 3;
    SwarmBehaviorState current_behavior = 4;
    
    // Membership
    repeated string member_ids = 5;
    uint32 member_count = 6;
    uint32 optimal_size = 7;           // Optimal swarm size
    uint32 minimum_viable_size = 8;    // Minimum members needed
    
    // Collective characteristics
    float collective_intelligence = 9;  // Emergent intelligence level
    float coherence_level = 10;        // Internal coordination level
    float efficiency_score = 11;       // Overall performance
    float adaptation_speed = 12;       // How quickly swarm adapts
    
    // Goals and objectives
    repeated string collective_goals = 13;
    map<string, float> goal_priorities = 14;
    float goal_achievement_rate = 15;
    string primary_objective = 16;
    
    // Communication network
    repeated SwarmCommunicationType active_communication_types = 17;
    float communication_density = 18;   // Amount of internal communication
    float information_flow_rate = 19;   // Speed of information propagation
    uint32 communication_hops = 20;     // Typical message hop count
    
    // Decision-making characteristics
    string decision_mechanism = 21;     // "consensus", "majority", "weighted"
    float decision_speed = 22;          // How quickly decisions are made
    float decision_quality = 23;        // Quality of decisions
    bool democratic = 24;               // Equal member voting rights
    
    // Spatial and temporal characteristics
    repeated float center_of_mass = 25; // Average position
    float spatial_spread = 26;          // How spread out the swarm is
    repeated float movement_vector = 27; // Overall movement direction
    float formation_stability = 28;     // How stable the formation is
    
    // Performance and productivity
    uint64 tasks_completed = 29;
    float productivity_rate = 30;       // Tasks per time unit
    float resource_efficiency = 31;     // Resource utilization efficiency
    float energy_consumption_rate = 32;
    
    // Learning and evolution
    repeated string learned_patterns = 33;
    float collective_learning_rate = 34;
    uint32 evolutionary_generations = 35;
    bool undergoing_evolution = 36;
    
    // Resilience and health
    float resilience_score = 37;        // Ability to handle disruption
    float health_score = 38;            // Overall swarm health
    uint32 failed_members = 39;         // Members that have failed
    bool self_healing_active = 40;      // Auto-recovery enabled
    
    // Specialization and roles
    map<string, uint32> role_distribution = 41; // Count of each role
    float role_diversity = 42;          // Variety of roles present
    bool role_adaptation_enabled = 43;  // Can members change roles?
    
    // Optimization characteristics
    bool senary_optimized = 44;
    float senary_efficiency_gain = 45;
    bool energy_optimized = 46;
    
    // Environmental adaptation
    map<string, float> environmental_factors = 47;
    float environmental_adaptation_level = 48;
    repeated string environmental_challenges = 49;
    
    // Metadata
    seigr.protocol.timestamp.SeigrTimestamp formation_time = 50;
    seigr.protocol.timestamp.SeigrTimestamp last_update = 51;
    map<string, string> metadata = 52;
}

// Swarm communication message
message SwarmMessage {
    string message_id = 1;
    string sender_id = 2;
    repeated string recipient_ids = 3;  // Empty for broadcast
    SwarmCommunicationType communication_type = 4;
    
    // Message content
    bytes payload = 5;
    string message_type = 6;            // "task", "signal", "data", "command"
    map<string, string> headers = 7;
    
    // Communication characteristics
    float signal_strength = 8;          // Signal power (0-1)
    float urgency_level = 9;            // Message urgency (0-1)
    uint32 hop_limit = 10;              // Maximum hops for propagation
    uint32 current_hops = 11;           // Current hop count
    
    // Biological-inspired properties
    float pheromone_strength = 12;      // Chemical signal strength
    uint32 decay_rate_ms = 13;          // How quickly signal decays
    bool reinforcement_enabled = 14;    // Can signal be reinforced?
    float emotional_charge = 15;        // Emotional content (-1 to 1)
    
    // Propagation properties
    bool broadcast_message = 16;
    repeated string propagation_path = 17; // Route taken by message
    float propagation_speed = 18;       // How fast message travels
    bool requires_acknowledgment = 19;
    
    // Content semantics
    repeated string semantic_tags = 20; // Message content categories
    float information_value = 21;       // Importance of information
    bool actionable = 22;               // Requires action from recipients
    string response_expected = 23;      // Type of response expected
    
    // Security and validation
    string digital_signature = 24;
    bool authenticated = 25;
    seigr.common.ThreatLevel security_level = 26;
    bool encrypted = 27;
    
    // Performance characteristics
    bool senary_optimized = 28;
    float energy_cost = 29;
    uint32 processing_time_ms = 30;
    
    // Temporal characteristics
    seigr.protocol.timestamp.SeigrTimestamp created_at = 31;
    seigr.protocol.timestamp.SeigrTimestamp expires_at = 32;
    uint32 time_to_live_ms = 33;
    
    // Metadata
    map<string, string> metadata = 34;
}

// Swarm task representing collective work
message SwarmTask {
    string task_id = 1;
    string task_name = 2;
    string task_description = 3;
    string task_type = 4;               // "optimization", "search", "computation", etc.
    
    // Task requirements
    repeated string required_capabilities = 5;
    uint32 required_members = 6;
    uint32 optimal_members = 7;
    map<string, uint32> required_roles = 8;
    
    // Task characteristics
    float complexity_level = 9;        // Task complexity (0-1)
    float urgency_level = 10;           // How urgent (0-1)
    uint32 estimated_duration_ms = 11;
    float resource_requirements = 12;   // Resource intensity
    
    // Goals and success criteria
    repeated string objectives = 13;
    map<string, float> success_metrics = 14;
    float success_threshold = 15;       // Minimum success level
    bool perfectibility_required = 16;  // Must be perfect vs good enough
    
    // Task decomposition
    repeated string subtasks = 17;      // Breakdown into smaller tasks
    map<string, string> task_dependencies = 18; // Task precedence
    bool parallelizable = 19;           // Can be done in parallel
    
    // Assignment and allocation
    repeated string assigned_members = 20;
    map<string, string> member_assignments = 21; // Member to subtask mapping
    string task_coordinator = 22;       // Lead member
    
    // Progress tracking
    float completion_percentage = 23;
    repeated string completed_subtasks = 24;
    repeated string in_progress_subtasks = 25;
    repeated string blocked_subtasks = 26;
    
    // Quality and performance
    float quality_score = 27;           // Current quality level
    float efficiency_score = 28;        // Efficiency of execution
    repeated string quality_issues = 29;
    
    // Adaptation and learning
    repeated string lessons_learned = 30;
    repeated string optimization_opportunities = 31;
    bool adaptive_execution = 32;       // Can change approach during execution
    
    // Resource management
    map<string, float> resource_allocation = 33;
    float energy_budget = 34;
    bool senary_optimized = 35;
    
    // Communication requirements
    repeated SwarmCommunicationType required_communications = 36;
    float communication_frequency = 37;
    bool real_time_coordination = 38;
    
    // Temporal characteristics
    seigr.protocol.timestamp.SeigrTimestamp created_at = 39;
    seigr.protocol.timestamp.SeigrTimestamp started_at = 40;
    seigr.protocol.timestamp.SeigrTimestamp deadline = 41;
    seigr.protocol.timestamp.SeigrTimestamp estimated_completion = 42;
    
    // Metadata
    map<string, string> metadata = 43;
}

// Swarm management request
message SwarmRequest {
    string session_id = 1;
    string requesting_entity = 2;
    
    // Request type
    enum SwarmOperation {
        OPERATION_UNKNOWN = 0;
        CREATE_SWARM = 1;              // Form new swarm
        JOIN_SWARM = 2;                // Join existing swarm
        LEAVE_SWARM = 3;               // Leave swarm
        ASSIGN_TASK = 4;               // Assign task to swarm
        COORDINATE_BEHAVIOR = 5;       // Coordinate swarm behavior
        OPTIMIZE_SWARM = 6;            // Optimize swarm performance
        EVOLVE_SWARM = 7;              // Trigger swarm evolution
        SEND_MESSAGE = 8;              // Send swarm message
        QUERY_STATUS = 9;              // Get swarm status
        CHANGE_ROLE = 10;              // Change member role
        MERGE_SWARMS = 11;             // Merge multiple swarms
        SPLIT_SWARM = 12;              // Split swarm into multiple
        HIBERNATE_SWARM = 13;          // Put swarm into low-activity state
        ACTIVATE_SWARM = 14;           // Activate dormant swarm
        DISSOLVE_SWARM = 15;           // Dissolve swarm
    }
    SwarmOperation operation = 3;
    
    // Request data
    SwarmCollective swarm_data = 4;
    SwarmMember member_data = 5;
    SwarmTask task_data = 6;
    SwarmMessage message_data = 7;
    
    // Operation parameters
    map<string, string> parameters = 8;
    float intensity = 9;               // Operation intensity (0-1)
    uint32 timeout_ms = 10;
    bool force_operation = 11;
    
    // Target specification
    repeated string target_swarm_ids = 12;
    repeated string target_member_ids = 13;
    string preferred_swarm_type = 14;
    
    // Performance requirements
    float performance_target = 15;
    bool senary_optimization_required = 16;
    bool energy_optimization_preferred = 17;
    float efficiency_target = 18;
    
    // Communication preferences
    repeated SwarmCommunicationType preferred_communications = 19;
    float communication_latency_requirement = 20;
    bool real_time_coordination_required = 21;
    
    // Security and authorization
    string authorization_token = 22;
    seigr.common.ThreatLevel security_level = 23;
    bool authenticated = 24;
}

// Response to swarm operations
message SwarmResponse {
    string session_id = 1;
    bool success = 2;
    string error_message = 3;
    
    // Response data
    SwarmCollective swarm_state = 4;
    repeated SwarmMember member_states = 5;
    repeated SwarmTask task_status = 6;
    repeated SwarmMessage messages = 7;
    
    // Operation results
    uint32 operation_time_ms = 8;
    float energy_consumed = 9;
    float efficiency_achieved = 10;
    bool senary_optimized = 11;
    
    // Collective intelligence metrics
    float collective_intelligence_level = 12;
    float coherence_improvement = 13;
    float performance_gain = 14;
    uint32 active_swarms = 15;
    uint32 total_members = 16;
    
    // Task execution results
    repeated string completed_tasks = 17;
    float task_success_rate = 18;
    float average_task_quality = 19;
    
    // Communication analysis
    uint32 messages_sent = 20;
    float communication_efficiency = 21;
    float information_flow_rate = 22;
    
    // Evolutionary changes
    repeated string evolutionary_adaptations = 23;
    float adaptation_effectiveness = 24;
    bool emergence_detected = 25;
    
    // Optimization insights
    repeated string optimization_opportunities = 26;
    float potential_improvements = 27;
    string optimization_recommendations = 28;
    
    // System impact
    float system_performance_impact = 29;
    repeated string affected_systems = 30;
    
    // Metadata
    seigr.protocol.timestamp.SeigrTimestamp timestamp = 31;
    map<string, string> metadata = 32;
}

// Service definitions for swarm intelligence
service SwarmService {
    // Swarm management
    rpc CreateSwarm(SwarmRequest) returns (SwarmResponse);
    rpc JoinSwarm(SwarmRequest) returns (SwarmResponse);
    rpc LeaveSwarm(SwarmRequest) returns (SwarmResponse);
    rpc GetSwarmStatus(SwarmRequest) returns (SwarmResponse);
    
    // Task coordination
    rpc AssignTask(SwarmRequest) returns (SwarmResponse);
    rpc CoordinateBehavior(SwarmRequest) returns (SwarmResponse);
    rpc MonitorTaskExecution(SwarmRequest) returns (stream SwarmResponse);
    
    // Communication
    rpc SendSwarmMessage(SwarmRequest) returns (SwarmResponse);
    rpc BroadcastToSwarm(SwarmRequest) returns (SwarmResponse);
    rpc EstablishCommunicationChannel(SwarmRequest) returns (SwarmResponse);
    
    // Optimization and evolution
    rpc OptimizeSwarm(SwarmRequest) returns (SwarmResponse);
    rpc EvolveSwarm(SwarmRequest) returns (SwarmResponse);
    rpc AdaptSwarmBehavior(SwarmRequest) returns (SwarmResponse);
    
    // Advanced operations
    rpc MergeSwarms(SwarmRequest) returns (SwarmResponse);
    rpc SplitSwarm(SwarmRequest) returns (SwarmResponse);
    rpc EmergentBehaviorDetection(SwarmRequest) returns (SwarmResponse);
    
    // Analysis and insights
    rpc AnalyzeSwarmIntelligence(SwarmRequest) returns (SwarmResponse);
    rpc PredictSwarmBehavior(SwarmRequest) returns (SwarmResponse);
    rpc GetCollectiveInsights(SwarmRequest) returns (SwarmResponse);
    
    // Senary optimization
    rpc OptimizeForSenary(SwarmRequest) returns (SwarmResponse);
    rpc CalculateSwarmEfficiency(SwarmRequest) returns (SwarmResponse);
}
