syntax = "proto3";

package seigr.protocol.rel;

import "seigr_timestamp.proto";

/**
 * Rebel Earthling License (RE-L) Protocol
 * 
 * Defines the protocol for contribution-based governance, automated
 * rights management, and decentralized decision-making within the Seigr ecosystem.
 * 
 * This protocol ensures fair, transparent, and automated governance
 * while maintaining 100% Seigr-native implementation with senary optimization.
 */

// ===========================
// ENUMS
// ===========================

/**
 * Types of contributions within the RE-L framework
 */
enum ContributionType {
    CONTRIBUTION_TYPE_UNKNOWN = 0;
    CONTRIBUTION_TYPE_ORIGINAL = 1;          // Original content creation
    CONTRIBUTION_TYPE_ENHANCEMENT = 2;       // Enhancement of existing content
    CONTRIBUTION_TYPE_CURATION = 3;          // Content curation and organization
    CONTRIBUTION_TYPE_VALIDATION = 4;        // Content validation and review
    CONTRIBUTION_TYPE_INFRASTRUCTURE = 5;    // Infrastructure contribution
    CONTRIBUTION_TYPE_GOVERNANCE = 6;        // Governance participation
    CONTRIBUTION_TYPE_EDUCATION = 7;         // Educational content
    CONTRIBUTION_TYPE_RESEARCH = 8;          // Research and development
    CONTRIBUTION_TYPE_COMMUNITY = 9;         // Community building
    CONTRIBUTION_TYPE_TRANSLATION = 10;      // Content translation
    CONTRIBUTION_TYPE_MAINTENANCE = 11;      // System maintenance
    CONTRIBUTION_TYPE_SECURITY = 12;         // Security auditing
}

/**
 * Entity types in the Seigr ecosystem
 */
enum EntityType {
    ENTITY_TYPE_UNKNOWN = 0;
    ENTITY_TYPE_INDIVIDUAL = 1;              // Individual contributor
    ENTITY_TYPE_COLLECTIVE = 2;              // Collective organization
    ENTITY_TYPE_AUTOMATED_SYSTEM = 3;        // Automated system/AI
    ENTITY_TYPE_COMMUNITY_PROJECT = 4;       // Community-driven project
    ENTITY_TYPE_RESEARCH_INSTITUTE = 5;      // Research institution
    ENTITY_TYPE_EDUCATIONAL_BODY = 6;        // Educational organization
    ENTITY_TYPE_INFRASTRUCTURE_NODE = 7;     // Infrastructure provider
    ENTITY_TYPE_GOVERNANCE_BODY = 8;         // Governance organization
}

/**
 * RE-L compliance status levels
 */
enum ComplianceStatus {
    COMPLIANCE_STATUS_UNKNOWN = 0;
    COMPLIANCE_STATUS_COMPLIANT = 1;         // Fully RE-L compliant
    COMPLIANCE_STATUS_PARTIAL = 2;           // Partially compliant
    COMPLIANCE_STATUS_NON_COMPLIANT = 3;     // Not RE-L compliant
    COMPLIANCE_STATUS_UNDER_REVIEW = 4;      // Under compliance review
    COMPLIANCE_STATUS_DISPUTED = 5;          // Compliance disputed
    COMPLIANCE_STATUS_EXEMPT = 6;            // Exempt from RE-L requirements
}

/**
 * Governance decision types
 */
enum GovernanceDecisionType {
    GOVERNANCE_DECISION_TYPE_UNKNOWN = 0;
    GOVERNANCE_DECISION_TYPE_POLICY = 1;           // Policy decision
    GOVERNANCE_DECISION_TYPE_RESOURCE_ALLOCATION = 2; // Resource allocation
    GOVERNANCE_DECISION_TYPE_DISPUTE_RESOLUTION = 3;  // Dispute resolution
    GOVERNANCE_DECISION_TYPE_PROTOCOL_UPGRADE = 4;    // Protocol upgrade
    GOVERNANCE_DECISION_TYPE_COMMUNITY_ACTION = 5;    // Community action
    GOVERNANCE_DECISION_TYPE_EMERGENCY_RESPONSE = 6;  // Emergency response
}

/**
 * Voting power calculation methods
 */
enum VotingPowerType {
    VOTING_POWER_TYPE_UNKNOWN = 0;
    VOTING_POWER_TYPE_EQUAL = 1;             // Equal voting power
    VOTING_POWER_TYPE_WEIGHTED = 2;          // Contribution-weighted
    VOTING_POWER_TYPE_STAKE_BASED = 3;       // Stake-based voting
    VOTING_POWER_TYPE_REPUTATION = 4;        // Reputation-based
    VOTING_POWER_TYPE_EXPERTISE = 5;         // Expertise-based
    VOTING_POWER_TYPE_SENARY = 6;            // Senary-optimized
}

// ===========================
// CORE IDENTITY MESSAGES
// ===========================

/**
 * Seigr ecosystem identity with RE-L compliance
 */
message SeigrIdentity {
    string seigr_id = 1;                          // Unique Seigr identifier
    EntityType entity_type = 2;                   // Type of entity
    string display_name = 3;                      // Public display name
    string bio = 4;                               // Entity biography/description
    map<string, string> contact_info = 5;         // Contact information
    bytes public_key = 6;                         // Cryptographic public key
    double trust_level = 7;                       // Trust score (0.0-1.0)
    double energy_efficiency = 8;                 // Energy efficiency metric
    int32 threat_assessment = 9;                  // Threat level assessment
    seigr.protocol.timestamp.SeigrTimestamp created_at = 10;    // Identity creation time
    seigr.protocol.timestamp.SeigrTimestamp last_active = 11;   // Last activity timestamp
    ComplianceStatus rel_compliance = 12;         // RE-L compliance status
    map<string, string> metadata = 13;            // Additional identity metadata
}

/**
 * Contribution Unit (CU) representing a specific contribution
 */
message ContributionUnit {
    string cu_id = 1;                             // Unique contribution ID
    SeigrIdentity creator_identity = 2;           // Creator identity
    ContributionType contribution_type = 3;       // Type of contribution
    string title = 4;                             // Contribution title
    string description = 5;                       // Detailed description
    string content_hash = 6;                      // Content cryptographic hash
    repeated string dependencies = 7;             // Dependent contribution IDs
    repeated string references = 8;               // Referenced external content
    LicensingTerms licensing_terms = 9;           // Licensing information
    QualityMetrics quality_metrics = 10;          // Quality assessment
    seigr.protocol.timestamp.SeigrTimestamp created_at = 11;    // Creation timestamp
    seigr.protocol.timestamp.SeigrTimestamp modified_at = 12;   // Last modification time
    map<string, string> contribution_metadata = 13; // Additional metadata
}

/**
 * Licensing terms for contributions
 */
message LicensingTerms {
    string license_type = 1;                      // License type (e.g., "REL")
    string version = 2;                           // License version
    repeated string permissions = 3;              // Granted permissions
    repeated string conditions = 4;               // License conditions
    repeated string limitations = 5;              // License limitations
    bool commercial_use_allowed = 6;              // Commercial use permission
    bool modification_allowed = 7;                // Modification permission
    bool distribution_allowed = 8;                // Distribution permission
    bool patent_grant = 9;                        // Patent grant included
    bool automated_governance = 10;               // Automated governance enabled
    bool community_voting = 11;                   // Community voting enabled
    map<string, string> custom_terms = 12;        // Custom license terms
}

/**
 * Quality metrics for contribution assessment
 */
message QualityMetrics {
    double accuracy = 1;                          // Content accuracy (0.0-1.0)
    double completeness = 2;                      // Content completeness (0.0-1.0)
    double relevance = 3;                         // Content relevance (0.0-1.0)
    double originality = 4;                       // Content originality (0.0-1.0)
    double technical_quality = 5;                 // Technical quality (0.0-1.0)
    double community_value = 6;                   // Community value (0.0-1.0)
    int32 peer_reviews = 7;                       // Number of peer reviews
    double average_rating = 8;                    // Average community rating
    int32 usage_count = 9;                        // Usage/download count
    int32 citation_count = 10;                    // Citation count
    map<string, double> custom_metrics = 11;      // Custom quality metrics
}

// ===========================
// GOVERNANCE MESSAGES
// ===========================

/**
 * Governance proposal for community decision-making
 */
message GovernanceProposal {
    string proposal_id = 1;                       // Unique proposal identifier
    SeigrIdentity proposer = 2;                   // Proposal creator
    GovernanceDecisionType decision_type = 3;     // Type of decision
    string title = 4;                             // Proposal title
    string description = 5;                       // Detailed description
    repeated string options = 6;                  // Voting options
    VotingPowerType voting_power_type = 7;        // Voting power calculation
    seigr.protocol.timestamp.SeigrTimestamp submission_time = 8; // Proposal submission time
    seigr.protocol.timestamp.SeigrTimestamp voting_start = 9;   // Voting period start
    seigr.protocol.timestamp.SeigrTimestamp voting_end = 10;    // Voting period end
    int32 quorum_requirement = 11;                // Minimum participation requirement
    double approval_threshold = 12;               // Approval threshold (0.0-1.0)
    ProposalStatus status = 13;                   // Current proposal status
    repeated GovernanceVote votes = 14;           // Submitted votes
    GovernanceResult result = 15;                 // Final result
    map<string, string> proposal_metadata = 16;   // Additional metadata
}

/**
 * Proposal status tracking
 */
enum ProposalStatus {
    PROPOSAL_STATUS_UNKNOWN = 0;
    PROPOSAL_STATUS_DRAFT = 1;                    // Draft proposal
    PROPOSAL_STATUS_SUBMITTED = 2;                // Submitted for review
    PROPOSAL_STATUS_UNDER_REVIEW = 3;             // Under community review
    PROPOSAL_STATUS_VOTING_OPEN = 4;              // Voting period active
    PROPOSAL_STATUS_VOTING_CLOSED = 5;            // Voting period ended
    PROPOSAL_STATUS_APPROVED = 6;                 // Proposal approved
    PROPOSAL_STATUS_REJECTED = 7;                 // Proposal rejected
    PROPOSAL_STATUS_WITHDRAWN = 8;                // Proposal withdrawn
    PROPOSAL_STATUS_EXPIRED = 9;                  // Proposal expired
}

/**
 * Individual governance vote
 */
message GovernanceVote {
    string vote_id = 1;                           // Unique vote identifier
    string proposal_id = 2;                       // Associated proposal ID
    SeigrIdentity voter = 3;                      // Voting identity
    string selected_option = 4;                   // Selected voting option
    double voting_power = 5;                      // Voter's voting power
    string reasoning = 6;                         // Vote reasoning (optional)
    seigr.protocol.timestamp.SeigrTimestamp cast_time = 7;      // Vote casting time
    bytes vote_signature = 8;                     // Cryptographic vote signature
    bool is_delegated = 9;                        // Whether vote is delegated
    string delegate_from = 10;                    // Original voter (if delegated)
    map<string, string> vote_metadata = 11;       // Additional vote metadata
}

/**
 * Governance decision result
 */
message GovernanceResult {
    string result_id = 1;                         // Unique result identifier
    string proposal_id = 2;                       // Associated proposal ID
    string winning_option = 3;                    // Winning voting option
    int32 total_votes = 4;                        // Total number of votes
    double total_voting_power = 5;                // Total voting power exercised
    double approval_percentage = 6;               // Approval percentage
    bool quorum_met = 7;                          // Whether quorum was met
    bool threshold_met = 8;                       // Whether threshold was met
    repeated OptionResult option_results = 9;     // Results per option
    seigr.protocol.timestamp.SeigrTimestamp finalized_time = 10; // Result finalization time
    bytes result_signature = 11;                 // Cryptographic result signature
    map<string, string> result_metadata = 12;     // Additional result metadata
}

/**
 * Voting results per option
 */
message OptionResult {
    string option = 1;                            // Voting option
    int32 vote_count = 2;                         // Number of votes
    double voting_power = 3;                      // Total voting power
    double percentage = 4;                        // Percentage of total
}

// ===========================
// COMPLIANCE AND AUDITING
// ===========================

/**
 * RE-L compliance audit record
 */
message ComplianceAuditRecord {
    string audit_id = 1;                          // Unique audit identifier
    string target_id = 2;                         // Audited entity/contribution ID
    string auditor_id = 3;                        // Auditor identity
    ComplianceStatus compliance_status = 4;       // Compliance assessment
    repeated string violations = 5;               // Identified violations
    repeated string recommendations = 6;          // Improvement recommendations
    seigr.protocol.timestamp.SeigrTimestamp audit_time = 7;     // Audit performance time
    seigr.protocol.timestamp.SeigrTimestamp next_audit = 8;     // Next scheduled audit
    bytes audit_signature = 9;                    // Cryptographic audit signature
    map<string, string> audit_metadata = 10;      // Additional audit data
}

/**
 * Automated compliance check result
 */
message AutomatedComplianceCheck {
    string check_id = 1;                          // Unique check identifier
    string target_id = 2;                         // Checked entity/contribution ID
    string check_type = 3;                        // Type of compliance check
    ComplianceStatus result = 4;                  // Check result
    double confidence_level = 5;                  // Confidence in result (0.0-1.0)
    repeated string findings = 6;                 // Detailed findings
    string automated_action = 7;                  // Automated action taken
    seigr.protocol.timestamp.SeigrTimestamp check_time = 8;     // Check execution time
    string check_algorithm = 9;                   // Algorithm used for check
    map<string, string> check_metadata = 10;      // Additional check data
}

// ===========================
// REPUTATION AND TRUST
// ===========================

/**
 * Reputation scoring for ecosystem participants
 */
message ReputationScore {
    string entity_id = 1;                         // Entity identifier
    double overall_score = 2;                     // Overall reputation (0.0-1.0)
    double contribution_quality = 3;              // Contribution quality score
    double community_engagement = 4;              // Community engagement score
    double governance_participation = 5;          // Governance participation score
    double technical_expertise = 6;               // Technical expertise score
    double reliability = 7;                       // Reliability score
    double trustworthiness = 8;                   // Trustworthiness score
    int32 total_contributions = 9;                // Total number of contributions
    int32 successful_collaborations = 10;         // Successful collaborations
    seigr.protocol.timestamp.SeigrTimestamp last_updated = 11;  // Last score update
    map<string, double> category_scores = 12;     // Category-specific scores
}

/**
 * Trust relationship between entities
 */
message TrustRelationship {
    string relationship_id = 1;                   // Unique relationship identifier
    string trustor_id = 2;                        // Entity giving trust
    string trustee_id = 3;                        // Entity receiving trust
    double trust_level = 4;                       // Trust level (0.0-1.0)
    string trust_category = 5;                    // Category of trust
    string trust_reasoning = 6;                   // Reason for trust level
    seigr.protocol.timestamp.SeigrTimestamp established = 7;    // Trust establishment time
    seigr.protocol.timestamp.SeigrTimestamp last_updated = 8;   // Last trust update
    repeated TrustEvidence evidence = 9;          // Supporting evidence
    map<string, string> trust_metadata = 10;      // Additional trust data
}

/**
 * Evidence supporting trust relationships
 */
message TrustEvidence {
    string evidence_id = 1;                       // Unique evidence identifier
    string evidence_type = 2;                     // Type of evidence
    string description = 3;                       // Evidence description
    double weight = 4;                            // Evidence weight (0.0-1.0)
    seigr.protocol.timestamp.SeigrTimestamp created = 5;        // Evidence creation time
    string verifier_id = 6;                       // Evidence verifier
    bytes evidence_hash = 7;                      // Evidence content hash
    map<string, string> evidence_metadata = 8;    // Additional evidence data
}

// ===========================
// SERVICES
// ===========================

/**
 * RE-L service interface for contribution and governance operations
 */
service RELService {
    // Identity management
    rpc RegisterIdentity(SeigrIdentity) returns (IdentityRegistrationResponse);
    rpc UpdateIdentity(IdentityUpdateRequest) returns (IdentityUpdateResponse);
    rpc GetIdentity(IdentityRequest) returns (SeigrIdentity);
    rpc VerifyIdentity(IdentityVerificationRequest) returns (IdentityVerificationResponse);
    
    // Contribution management
    rpc RegisterContribution(ContributionUnit) returns (ContributionRegistrationResponse);
    rpc UpdateContribution(ContributionUpdateRequest) returns (ContributionUpdateResponse);
    rpc GetContribution(ContributionRequest) returns (ContributionUnit);
    rpc SearchContributions(ContributionSearchRequest) returns (ContributionSearchResponse);
    
    // Governance operations
    rpc SubmitProposal(GovernanceProposal) returns (ProposalSubmissionResponse);
    rpc CastVote(GovernanceVote) returns (VoteCastingResponse);
    rpc GetProposal(ProposalRequest) returns (GovernanceProposal);
    rpc GetGovernanceResults(ResultRequest) returns (GovernanceResult);
    
    // Compliance and auditing
    rpc CheckCompliance(ComplianceCheckRequest) returns (AutomatedComplianceCheck);
    rpc PerformAudit(AuditRequest) returns (ComplianceAuditRecord);
    rpc GetComplianceStatus(ComplianceStatusRequest) returns (ComplianceStatusResponse);
    
    // Reputation and trust
    rpc GetReputationScore(ReputationRequest) returns (ReputationScore);
    rpc UpdateTrustRelationship(TrustUpdateRequest) returns (TrustUpdateResponse);
    rpc GetTrustNetwork(TrustNetworkRequest) returns (TrustNetworkResponse);
}

// ===========================
// SERVICE REQUEST/RESPONSE MESSAGES
// ===========================

message IdentityRegistrationResponse {
    bool success = 1;
    string message = 2;
    string assigned_seigr_id = 3;
}

message IdentityUpdateRequest {
    string seigr_id = 1;
    SeigrIdentity updated_identity = 2;
}

message IdentityUpdateResponse {
    bool success = 1;
    string message = 2;
}

message IdentityRequest {
    string seigr_id = 1;
}

message IdentityVerificationRequest {
    string seigr_id = 1;
    bytes challenge_signature = 2;
}

message IdentityVerificationResponse {
    bool verified = 1;
    string message = 2;
    double trust_level = 3;
}

message ContributionRegistrationResponse {
    bool success = 1;
    string message = 2;
    string assigned_cu_id = 3;
}

message ContributionUpdateRequest {
    string cu_id = 1;
    ContributionUnit updated_contribution = 2;
}

message ContributionUpdateResponse {
    bool success = 1;
    string message = 2;
}

message ContributionRequest {
    string cu_id = 1;
}

message ContributionSearchRequest {
    ContributionType contribution_type = 1;
    string creator_id = 2;
    string keyword = 3;
    int32 max_results = 4;
}

message ContributionSearchResponse {
    repeated ContributionUnit contributions = 1;
    int32 total_count = 2;
    bool has_more = 3;
}

message ProposalSubmissionResponse {
    bool accepted = 1;
    string message = 2;
    string assigned_proposal_id = 3;
}

message VoteCastingResponse {
    bool accepted = 1;
    string message = 2;
    string vote_id = 3;
}

message ProposalRequest {
    string proposal_id = 1;
}

message ResultRequest {
    string proposal_id = 1;
}

message ComplianceCheckRequest {
    string target_id = 1;
    string check_type = 2;
}

message AuditRequest {
    string target_id = 1;
    string auditor_id = 2;
}

message ComplianceStatusRequest {
    string target_id = 1;
}

message ComplianceStatusResponse {
    ComplianceStatus status = 1;
    repeated string violations = 2;
    seigr.protocol.timestamp.SeigrTimestamp last_check = 3;
}

message ReputationRequest {
    string entity_id = 1;
}

message TrustUpdateRequest {
    TrustRelationship trust_relationship = 1;
}

message TrustUpdateResponse {
    bool success = 1;
    string message = 2;
}

message TrustNetworkRequest {
    string entity_id = 1;
    int32 depth = 2;
}

message TrustNetworkResponse {
    repeated TrustRelationship relationships = 1;
    int32 total_connections = 2;
}
