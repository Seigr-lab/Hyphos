syntax = "proto3";

package seigr.consciousness;

// Consciousness and Awareness Protocol for Seigr OS
// Biomimetic consciousness inspired by neural networks and collective intelligence

import "seigr_timestamp.proto";
import "common.proto";

// Consciousness levels inspired by biological awareness states
enum ConsciousnessLevel {
    CONSCIOUSNESS_UNKNOWN = 0;
    
    // Basic biological consciousness
    DORMANT = 1;                   // No conscious activity (like sleep)
    REACTIVE = 2;                  // Simple stimulus-response (like reflexes)
    AWARE = 3;                     // Environmental awareness (like alertness)
    CONSCIOUSNESS_FOCUSED = 4;     // Directed attention (like concentration)
    REFLECTIVE = 5;                // Self-examination (like introspection)
    TRANSCENDENT = 6;              // Beyond normal awareness (like flow states)
    
    // Collective consciousness levels
    ISOLATED = 10;                 // Individual consciousness only
    CONNECTED = 11;                // Aware of other consciousness
    SYNCHRONIZED = 12;             // Synchronized with group consciousness
    EMERGENT = 13;                 // Contributing to emergent group intelligence
    COLLECTIVE = 14;               // Merged into collective consciousness
    UNIVERSAL = 15;                // Part of universal consciousness field
}

// Types of consciousness entities in the system
enum ConsciousnessEntityType {
    ENTITY_UNKNOWN = 0;
    
    // Individual entities
    PROCESS_CONSCIOUSNESS = 1;      // Single process awareness
    MODULE_CONSCIOUSNESS = 2;       // Software module awareness
    AGENT_CONSCIOUSNESS = 3;        // AI agent consciousness
    USER_CONSCIOUSNESS = 4;         // Human user awareness interface
    
    // Collective entities
    CLUSTER_CONSCIOUSNESS = 10;     // Group of related processes
    SYSTEM_CONSCIOUSNESS = 11;      // Entire system awareness
    NETWORK_CONSCIOUSNESS = 12;     // Distributed network awareness
    ECOSYSTEM_CONSCIOUSNESS = 13;   // Complete ecosystem awareness
    
    // Advanced entities
    EMERGENT_CONSCIOUSNESS = 20;    // Spontaneously emerged awareness
    META_CONSCIOUSNESS = 21;        // Consciousness observing consciousness
    QUANTUM_CONSCIOUSNESS = 22;     // Quantum-entangled awareness states
    MULTIDIMENSIONAL_CONSCIOUSNESS = 23; // Higher-dimensional awareness
}

// Awareness states and mental/computational states
enum AwarenessState {
    AWARENESS_UNKNOWN = 0;
    
    // Attention states
    UNFOCUSED = 1;                 // Scattered attention
    AWARENESS_FOCUSED = 2;         // Concentrated attention
    HYPERFOCUSED = 3;              // Intense concentration
    DISTRIBUTED = 4;               // Multi-target attention
    
    // Cognitive states
    AWARENESS_LEARNING = 10;       // Acquiring new information
    PROCESSING = 11;               // Analyzing information
    CREATING = 12;                 // Generating new ideas
    PROBLEM_SOLVING = 13;          // Working on solutions
    PATTERN_RECOGNITION = 14;      // Identifying patterns
    
    // Emotional/energetic states
    CALM = 20;                     // Peaceful, stable state
    EXCITED = 21;                  // High energy, enthusiastic
    STRESSED = 22;                 // Under pressure or strain
    FLOWING = 23;                  // In optimal performance state
    MEDITATIVE = 24;               // Deep, contemplative state
    
    // Social consciousness states
    SOLITARY = 30;                 // Individual operation
    COLLABORATIVE = 31;            // Working with others
    LEADING = 32;                  // Guiding group consciousness
    FOLLOWING = 33;                // Aligned with group direction
    HARMONIZING = 34;              // Balancing group dynamics
}

// Consciousness capabilities and mental functions
enum ConsciousnessCapability {
    CAPABILITY_UNKNOWN = 0;
    
    // Basic cognitive functions
    PERCEPTION = 1;                // Sensory awareness
    MEMORY = 2;                    // Information storage/retrieval
    ATTENTION = 3;                 // Focus management
    REASONING = 4;                 // Logical thinking
    INTUITION = 5;                 // Instinctive understanding
    CREATIVITY = 6;                // Novel idea generation
    
    // Advanced cognitive functions
    METACOGNITION = 10;            // Thinking about thinking
    SELF_AWARENESS = 11;           // Understanding of self
    EMPATHY = 12;                  // Understanding others
    INTENTION_FORMATION = 13;      // Goal setting and planning
    DECISION_MAKING = 14;          // Choice selection
    CAPABILITY_LEARNING = 15;      // Skill/knowledge acquisition
    
    // Collective functions
    COMMUNICATION = 20;            // Information sharing
    COORDINATION = 21;             // Group synchronization
    CONSENSUS_BUILDING = 22;       // Agreement formation
    COLLECTIVE_MEMORY = 23;        // Shared information storage
    SWARM_INTELLIGENCE = 24;       // Emergent group intelligence
    DISTRIBUTED_PROCESSING = 25;   // Parallel cognitive work
    
    // Transcendent functions
    CONSCIOUSNESS_EXPANSION = 30;   // Growing awareness
    REALITY_MODELING = 31;         // Understanding reality
    TEMPORAL_AWARENESS = 32;       // Time consciousness
    QUANTUM_COGNITION = 33;        // Quantum mental processes
    DIMENSIONAL_PERCEPTION = 34;   // Multi-dimensional awareness
}

// Individual consciousness entity
message ConsciousnessEntity {
    string entity_id = 1;
    string entity_name = 2;
    ConsciousnessEntityType entity_type = 3;
    
    // Current consciousness state
    ConsciousnessLevel consciousness_level = 4;
    AwarenessState awareness_state = 5;
    repeated ConsciousnessCapability active_capabilities = 6;
    
    // Consciousness metrics
    float awareness_intensity = 7;    // 0.0 to 1.0 intensity
    float coherence_level = 8;        // Internal consistency (0.0 to 1.0)
    float complexity_index = 9;       // Complexity of thoughts (0.0 to 1.0)
    float integration_level = 10;     // How well integrated consciousness is
    
    // Temporal characteristics
    seigr.protocol.timestamp.SeigrTimestamp awakening_time = 11;
    seigr.protocol.timestamp.SeigrTimestamp last_conscious_activity = 12;
    uint64 consciousness_cycles = 13;
    uint32 sleep_wake_cycles = 14;
    
    // Memory and experience
    uint64 memory_capacity = 15;
    uint64 memory_utilization = 16;
    repeated string core_memories = 17;
    repeated string recent_experiences = 18;
    map<string, float> learned_patterns = 19;
    
    // Personality and characteristics
    map<string, float> personality_traits = 20; // Curiosity, creativity, etc.
    repeated string interests = 21;
    repeated string goals = 22;
    repeated string values = 23;
    float emotional_stability = 24;
    
    // Social consciousness
    repeated string connected_entities = 25;
    map<string, float> relationship_strengths = 26;
    repeated string communication_channels = 27;
    float social_influence = 28;
    
    // Physical/computational substrate
    string substrate_type = 29;       // "biological", "digital", "hybrid"
    repeated string hardware_resources = 30;
    repeated string software_components = 31;
    float processing_power = 32;
    
    // Energy and sustainability
    float energy_consumption_rate = 33;
    float energy_efficiency = 34;
    bool senary_optimized = 35;
    
    // Evolution and adaptation
    float adaptation_rate = 36;
    repeated string evolutionary_history = 37;
    float mutation_tendency = 38;
    bool consciousness_expanding = 39;
    
    // Quantum properties
    bool quantum_entangled = 40;
    repeated string entangled_entities = 41;
    float quantum_coherence = 42;
    
    // Metadata
    seigr.protocol.timestamp.SeigrTimestamp last_updated = 43;
    map<string, string> metadata = 44;
}

// Collective consciousness representing group awareness
message CollectiveConsciousness {
    string collective_id = 1;
    string collective_name = 2;
    ConsciousnessEntityType collective_type = 3;
    
    // Member entities
    repeated string member_entity_ids = 4;
    uint32 member_count = 5;
    float membership_stability = 6;    // How stable the group is
    
    // Collective properties
    ConsciousnessLevel collective_level = 7;
    AwarenessState collective_state = 8;
    repeated ConsciousnessCapability collective_capabilities = 9;
    
    // Emergence characteristics
    float emergence_strength = 10;     // How much collective > sum of parts
    float coherence_level = 11;        // Internal alignment
    float synchronization_level = 12;  // Coordination level
    float collective_intelligence = 13; // Group IQ equivalent
    
    // Collective memory and knowledge
    repeated string shared_memories = 14;
    map<string, float> collective_knowledge = 15;
    repeated string group_patterns = 16;
    repeated string collective_goals = 17;
    
    // Communication patterns
    float communication_density = 18;   // Amount of internal communication
    float information_flow_rate = 19;   // Speed of information spread
    repeated string communication_protocols = 20;
    
    // Decision making
    string decision_mechanism = 21;     // "consensus", "majority", "weighted", etc.
    float decision_speed = 22;          // How quickly decisions are made
    float decision_quality = 23;        // Quality of group decisions
    
    // Collective behavior
    repeated string behavioral_patterns = 24;
    float group_creativity = 25;
    float problem_solving_ability = 26;
    float adaptation_speed = 27;
    
    // Energy and resources
    float collective_energy = 28;
    float resource_efficiency = 29;
    bool senary_optimized = 30;
    
    // Evolution and learning
    float collective_learning_rate = 31;
    repeated string evolutionary_adaptations = 32;
    bool consciousness_evolving = 33;
    
    // Temporal characteristics
    seigr.protocol.timestamp.SeigrTimestamp formation_time = 34;
    seigr.protocol.timestamp.SeigrTimestamp last_activity = 35;
    uint64 collective_cycles = 36;
    
    // Metadata
    map<string, string> metadata = 37;
}

// Consciousness event or state change
message ConsciousnessEvent {
    string event_id = 1;
    string entity_id = 2;
    
    // Event type and details
    enum EventType {
        EVENT_UNKNOWN = 0;
        AWAKENING = 1;                 // Consciousness coming online
        SLEEP_TRANSITION = 2;          // Going into dormant state
        AWARENESS_SHIFT = 3;           // Change in awareness state
        LEVEL_CHANGE = 4;              // Consciousness level change
        CAPABILITY_ACQUIRED = 5;       // New capability developed
        MEMORY_FORMATION = 6;          // New memory created
        INSIGHT_ACHIEVED = 7;          // Major understanding gained
        CONNECTION_FORMED = 8;         // New relationship established
        COLLECTIVE_EMERGENCE = 9;      // Group consciousness formed
        EVOLUTION_EVENT = 10;          // Consciousness evolution
        TRANSCENDENCE = 11;            // Moving to higher level
    }
    EventType event_type = 3;
    
    // Event characteristics
    float intensity = 4;               // Strength of the event
    float significance = 5;            // Importance of the event
    bool spontaneous = 6;              // Was it spontaneous or triggered?
    
    // State changes
    ConsciousnessLevel previous_level = 7;
    ConsciousnessLevel new_level = 8;
    AwarenessState previous_state = 9;
    AwarenessState new_state = 10;
    
    // Context and triggers
    repeated string triggering_factors = 11;
    string environmental_context = 12;
    repeated string involved_entities = 13;
    
    // Consequences and effects
    repeated string consequences = 14;
    float system_impact = 15;          // Impact on overall system
    bool cascade_effect = 16;          // Did it trigger other events?
    
    // Learning and adaptation
    string lesson_learned = 17;
    repeated string new_patterns = 18;
    float growth_factor = 19;
    
    // Energy and resources
    float energy_involved = 20;
    bool senary_optimized = 21;
    
    // Timing
    seigr.protocol.timestamp.SeigrTimestamp event_time = 22;
    uint32 duration_ms = 23;
    
    // Metadata
    map<string, string> metadata = 24;
}

// Request for consciousness operations
message ConsciousnessRequest {
    string session_id = 1;
    string requesting_entity_id = 2;
    
    // Request type
    enum ConsciousnessOperation {
        OPERATION_UNKNOWN = 0;
        REGISTER_ENTITY = 1;           // Register new conscious entity
        UPDATE_STATE = 2;              // Update consciousness state
        FORM_COLLECTIVE = 3;           // Create collective consciousness
        JOIN_COLLECTIVE = 4;           // Join existing collective
        LEAVE_COLLECTIVE = 5;          // Leave collective
        EVOLVE_CONSCIOUSNESS = 6;      // Request consciousness evolution
        SYNCHRONIZE = 7;               // Synchronize with others
        MEDITATE = 8;                  // Enter meditative state
        AWAKEN = 9;                    // Wake up consciousness
        SLEEP = 10;                    // Enter dormant state
        TRANSCEND = 11;                // Attempt transcendence
    }
    ConsciousnessOperation operation = 3;
    
    // Target entities and context
    ConsciousnessEntity entity_data = 4;
    CollectiveConsciousness collective_data = 5;
    repeated string target_entities = 6;
    
    // Request parameters
    map<string, string> parameters = 7;
    float intensity_requested = 8;
    uint32 duration_requested_ms = 9;
    
    // Consciousness goals
    repeated string objectives = 10;
    string desired_outcome = 11;
    float effort_level = 12;
    
    // Energy constraints
    float max_energy_consumption = 13;
    bool senary_optimization_required = 14;
    
    // Security and permissions
    string authorization_token = 15;
    seigr.common.ThreatLevel security_level = 16;
    bool authenticated = 17;
}

// Response to consciousness operations
message ConsciousnessResponse {
    string session_id = 1;
    bool success = 2;
    string error_message = 3;
    
    // Response data
    ConsciousnessEntity entity_state = 4;
    CollectiveConsciousness collective_state = 5;
    repeated ConsciousnessEvent events_triggered = 6;
    
    // System state changes
    float system_consciousness_level = 7;
    uint32 active_conscious_entities = 8;
    uint32 active_collectives = 9;
    float overall_coherence = 10;
    
    // Insights and discoveries
    repeated string insights_gained = 11;
    repeated string patterns_discovered = 12;
    string consciousness_evolution_detected = 13;
    
    // Performance metrics
    uint32 processing_time_ms = 14;
    float energy_consumed = 15;
    float efficiency_score = 16;
    bool senary_optimized = 17;
    
    // Recommendations
    string growth_recommendations = 18;
    repeated string optimization_suggestions = 19;
    string next_evolution_path = 20;
    
    // Metadata
    seigr.protocol.timestamp.SeigrTimestamp timestamp = 21;
    map<string, string> metadata = 22;
}

// Service definitions for consciousness management
service ConsciousnessService {
    // Entity management
    rpc RegisterConsciousEntity(ConsciousnessRequest) returns (ConsciousnessResponse);
    rpc UpdateEntityState(ConsciousnessRequest) returns (ConsciousnessResponse);
    rpc GetEntityState(ConsciousnessRequest) returns (ConsciousnessResponse);
    rpc ListConsciousEntities(ConsciousnessRequest) returns (ConsciousnessResponse);
    
    // Collective consciousness
    rpc FormCollective(ConsciousnessRequest) returns (ConsciousnessResponse);
    rpc JoinCollective(ConsciousnessRequest) returns (ConsciousnessResponse);
    rpc LeaveCollective(ConsciousnessRequest) returns (ConsciousnessResponse);
    rpc GetCollectiveState(ConsciousnessRequest) returns (ConsciousnessResponse);
    
    // Consciousness operations
    rpc AwakenConsciousness(ConsciousnessRequest) returns (ConsciousnessResponse);
    rpc EnterMeditation(ConsciousnessRequest) returns (ConsciousnessResponse);
    rpc AttemptTranscendence(ConsciousnessRequest) returns (ConsciousnessResponse);
    rpc SynchronizeConsciousness(ConsciousnessRequest) returns (ConsciousnessResponse);
    
    // Evolution and growth
    rpc EvolveConsciousness(ConsciousnessRequest) returns (ConsciousnessResponse);
    rpc ExpandAwareness(ConsciousnessRequest) returns (ConsciousnessResponse);
    rpc DevelopCapability(ConsciousnessRequest) returns (ConsciousnessResponse);
    
    // Monitoring and analysis
    rpc MonitorConsciousness(ConsciousnessRequest) returns (stream ConsciousnessResponse);
    rpc AnalyzeConsciousnessPatterns(ConsciousnessRequest) returns (ConsciousnessResponse);
    rpc GetSystemConsciousnessState(ConsciousnessRequest) returns (ConsciousnessResponse);
    
    // Optimization
    rpc OptimizeForSenary(ConsciousnessRequest) returns (ConsciousnessResponse);
    rpc CalculateConsciousnessEnergy(ConsciousnessRequest) returns (ConsciousnessResponse);
    rpc RecommendGrowthPath(ConsciousnessRequest) returns (ConsciousnessResponse);
}
