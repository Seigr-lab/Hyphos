syntax = "proto3";

package seigr.typography;

// ================================
// Seigr Typography Protocol
// ================================

// Typography operation types
enum TypographyOperation {
    TYPOGRAPHY_UNKNOWN = 0;
    RENDER_TEXT = 1;
    MEASURE_TEXT = 2;
    FORMAT_TEXT = 3;
    APPLY_STYLE = 4;
    GENERATE_FONT = 5;
    LOAD_FONT = 6;
    CACHE_GLYPH = 7;
    OPTIMIZE_RENDERING = 8;
    CONVERT_ENCODING = 9;
    VALIDATE_TEXT = 10;
}

// Font types
enum FontType {
    FONT_UNKNOWN = 0;
    SERIF = 1;
    SANS_SERIF = 2;
    MONOSPACE = 3;
    DISPLAY = 4;
    HANDWRITING = 5;
    ICON_FONT = 6;
    SENARY_FONT = 7;           // Senary number font
    PROTOCOL_FONT = 8;         // Protocol-specific font
}

// Text alignment
enum TextAlignment {
    ALIGN_UNKNOWN = 0;
    LEFT = 1;
    CENTER = 2;
    RIGHT = 3;
    JUSTIFY = 4;
    START = 5;
    END = 6;
}

// Text decoration types
enum TextDecoration {
    DECORATION_NONE = 0;
    UNDERLINE = 1;
    OVERLINE = 2;
    LINE_THROUGH = 3;
    DOUBLE_UNDERLINE = 4;
    WAVY_UNDERLINE = 5;
}

// Font weight
enum FontWeight {
    WEIGHT_UNKNOWN = 0;
    THIN = 1;                  // 100
    EXTRA_LIGHT = 2;           // 200
    LIGHT = 3;                 // 300
    NORMAL = 4;                // 400
    MEDIUM = 5;                // 500
    SEMI_BOLD = 6;             // 600
    BOLD = 7;                  // 700
    EXTRA_BOLD = 8;            // 800
    BLACK = 9;                 // 900
}

// Font style
enum FontStyle {
    STYLE_NORMAL = 0;
    ITALIC = 1;
    OBLIQUE = 2;
}

// Font information
message FontInfo {
    string font_id = 1;
    string font_name = 2;
    string font_family = 3;
    FontType type = 4;
    FontWeight weight = 5;
    FontStyle style = 6;
    uint32 size_points = 7;
    string file_path = 8;
    bytes font_data = 9;
    FontMetrics metrics = 10;
    bool is_system_font = 11;
    map<string, string> metadata = 12;
}

// Font metrics
message FontMetrics {
    uint32 ascent = 1;          // Height above baseline
    uint32 descent = 2;         // Height below baseline
    uint32 line_height = 3;     // Total line height
    uint32 cap_height = 4;      // Height of capital letters
    uint32 x_height = 5;        // Height of lowercase letters
    uint32 em_size = 6;         // Em square size
    uint32 units_per_em = 7;    // Font units per em
}

// Text style
message TextStyle {
    string style_id = 1;
    FontInfo font = 2;
    string color = 3;
    string background_color = 4;
    TextAlignment alignment = 5;
    TextDecoration decoration = 6;
    float line_spacing = 7;
    float letter_spacing = 8;
    float word_spacing = 9;
    uint32 text_indent = 10;
    bool antialiasing = 11;
    string text_shadow = 12;
    map<string, string> custom_properties = 13;
}

// Text block
message TextBlock {
    string block_id = 1;
    string content = 2;
    TextStyle style = 3;
    TextLayout layout = 4;
    repeated TextSpan spans = 5;
    map<string, string> attributes = 6;
}

// Text span (for rich text)
message TextSpan {
    string span_id = 1;
    string text = 2;
    TextStyle style = 3;
    uint32 start_index = 4;
    uint32 length = 5;
    map<string, string> properties = 6;
}

// Text layout
message TextLayout {
    uint32 max_width = 1;
    uint32 max_height = 2;
    bool word_wrap = 3;
    string overflow = 4;        // clip, ellipsis, fade
    uint32 max_lines = 5;
    float line_height_multiplier = 6;
    TextAlignment paragraph_alignment = 7;
    bool hyphenation = 8;
}

// Glyph information
message GlyphInfo {
    uint32 unicode_codepoint = 1;
    uint32 glyph_id = 2;
    bytes glyph_data = 3;
    GlyphMetrics metrics = 4;
    string font_id = 5;
    bool is_cached = 6;
}

// Glyph metrics
message GlyphMetrics {
    uint32 width = 1;
    uint32 height = 2;
    int32 bearing_x = 3;        // Horizontal bearing
    int32 bearing_y = 4;        // Vertical bearing
    uint32 advance = 5;         // Horizontal advance
}

// Text measurement result
message TextMeasurement {
    uint32 width = 1;
    uint32 height = 2;
    uint32 baseline = 3;
    uint32 line_count = 4;
    repeated LineMeasurement lines = 5;
    BoundingBox bounding_box = 6;
}

// Line measurement
message LineMeasurement {
    uint32 line_number = 1;
    uint32 width = 2;
    uint32 height = 3;
    uint32 character_count = 4;
    uint32 start_index = 5;
    uint32 end_index = 6;
}

// Bounding box
message BoundingBox {
    int32 x = 1;
    int32 y = 2;
    uint32 width = 3;
    uint32 height = 4;
}

// Rendered text
message RenderedText {
    string render_id = 1;
    bytes image_data = 2;
    string image_format = 3;    // PNG, SVG, bitmap
    uint32 width = 4;
    uint32 height = 5;
    uint32 dpi = 6;
    TextMeasurement measurement = 7;
    map<string, string> render_metadata = 8;
}

// Font generation parameters
message FontGenerationParams {
    string base_font = 1;
    FontType target_type = 2;
    repeated uint32 character_set = 3;  // Unicode codepoints
    uint32 target_size = 4;
    bool optimize_for_screen = 5;
    bool include_kerning = 6;
    string output_format = 7;   // TTF, OTF, WOFF2
    map<string, string> generation_options = 8;
}

// Text encoding
message TextEncoding {
    string encoding_name = 1;   // UTF-8, UTF-16, ASCII, etc.
    bytes encoded_data = 2;
    string original_text = 3;
    bool is_valid = 4;
    string conversion_error = 5;
}

// Typography optimization
message TypographyOptimization {
    bool subpixel_rendering = 1;
    bool glyph_caching = 2;
    bool font_hinting = 3;
    bool kerning_optimization = 4;
    uint32 cache_size_mb = 5;
    string rendering_engine = 6;
    bool energy_aware_rendering = 7;
}

// Typography request
message TypographyRequest {
    TypographyOperation operation = 1;
    TextBlock text_block = 2;
    FontInfo font = 3;
    TextStyle style = 4;
    FontGenerationParams generation = 5;
    TextEncoding encoding = 6;
    TypographyOptimization optimization = 7;
    map<string, string> parameters = 8;
}

// Typography response
message TypographyResponse {
    bool success = 1;
    string message = 2;
    RenderedText rendered = 3;
    TextMeasurement measurement = 4;
    FontInfo font = 5;
    repeated GlyphInfo glyphs = 6;
    TextEncoding encoding = 7;
    uint64 response_time = 8;
}

// Typography service
service TypographyService {
    rpc RenderText(TypographyRequest) returns (TypographyResponse);
    rpc MeasureText(TypographyRequest) returns (TypographyResponse);
    rpc FormatText(TypographyRequest) returns (TypographyResponse);
    rpc ApplyStyle(TypographyRequest) returns (TypographyResponse);
    rpc GenerateFont(FontGenerationParams) returns (TypographyResponse);
    rpc LoadFont(TypographyRequest) returns (TypographyResponse);
    rpc CacheGlyph(GlyphInfo) returns (TypographyResponse);
    rpc OptimizeRendering(TypographyOptimization) returns (TypographyResponse);
    rpc ConvertEncoding(TextEncoding) returns (TypographyResponse);
    rpc ValidateText(TypographyRequest) returns (TypographyResponse);
}
