syntax = "proto3";

package seigr.graphics;

import "seigr_timestamp.proto";
import "common.proto";

/**
 * Seigr Native Graphics Protocol (SNGF)
 * 
 * Complete hardware-agnostic graphics system using senary-optimized
 * data structures and energy-aware rendering. Zero third-party dependencies.
 * 
 * Philosophy:
 * - All color data in senary (base-6) representation
 * - Energy-conscious rendering algorithms
 * - Hardware abstraction for any platform
 * - Protocol-driven, emergent graphics capabilities
 */

// ===========================
// ENUMS
// ===========================

/**
 * Senary-optimized color model
 */
enum SenaryColorModel {
    SENARY_RGB = 0;        // Red-Green-Blue in base-6 values (0-5 per channel)
    SENARY_HSV = 1;        // Hue-Saturation-Value in senary
    SENARY_GRAYSCALE = 2;  // Single channel grayscale (0-5)
    SENARY_ENERGY = 3;     // Energy-aware color optimization
}

/**
 * Hardware-agnostic rendering backends
 */
enum RenderingBackend {
    BACKEND_FRAMEBUFFER = 0;  // Direct framebuffer access (Pi 5, embedded)
    BACKEND_SOFTWARE = 1;     // Software rendering (any platform)
    BACKEND_HARDWARE = 2;     // Hardware acceleration (when available)
    BACKEND_HEADLESS = 3;     // Headless rendering for servers
    BACKEND_TERMINAL = 4;     // ASCII/text-based rendering
}

/**
 * Graphics primitive types
 */
enum PrimitiveType {
    PRIMITIVE_POINT = 0;
    PRIMITIVE_LINE = 1;
    PRIMITIVE_TRIANGLE = 2;
    PRIMITIVE_RECTANGLE = 3;
    PRIMITIVE_CIRCLE = 4;
    PRIMITIVE_POLYGON = 5;
}

/**
 * Pixel format definitions
 */
enum PixelFormat {
    FORMAT_SENARY_RGB888 = 0;   // 8 bits per channel, senary values
    FORMAT_SENARY_RGB565 = 1;   // 5-6-5 bit RGB, senary optimized
    FORMAT_SENARY_RGBA8888 = 2; // RGB + Alpha, senary values
    FORMAT_SENARY_GRAY8 = 3;    // 8-bit grayscale, senary
    FORMAT_ENERGY_OPTIMIZED = 4; // Custom energy-aware format
}

// ===========================
// CORE DATA STRUCTURES
// ===========================

/**
 * Senary-optimized color representation
 */
message SenaryColor {
    SenaryColorModel model = 1;     // Color model used
    uint32 r = 2;                   // Red/Hue component (0-5 in senary)
    uint32 g = 3;                   // Green/Saturation component (0-5)
    uint32 b = 4;                   // Blue/Value component (0-5)
    uint32 alpha = 5;               // Alpha transparency (0-5)
    float energy_cost = 6;          // Energy cost of this color
    map<string, string> metadata = 7; // Color metadata
}

/**
 * Hardware-agnostic pixel data
 */
message SenaryPixel {
    uint32 x = 1;                   // X coordinate
    uint32 y = 2;                   // Y coordinate
    SenaryColor color = 3;          // Pixel color
    uint32 layer = 4;               // Z-layer for compositing
}

/**
 * Native Seigr image format
 */
message SeigrImage {
    string image_id = 1;            // Unique image identifier
    uint32 width = 2;               // Image width in pixels
    uint32 height = 3;              // Image height in pixels
    PixelFormat format = 4;         // Pixel format
    SenaryColorModel color_model = 5; // Color model used
    repeated SenaryPixel pixels = 6;  // Raw pixel data
    bytes compressed_data = 7;      // Senary-compressed pixel data
    map<string, string> metadata = 8; // Image metadata
    seigr.protocol.timestamp.SeigrTimestamp created_at = 9;
    float energy_efficiency = 10;   // Energy efficiency rating
}

/**
 * Graphics surface/canvas
 */
message GraphicsSurface {
    string surface_id = 1;          // Unique surface identifier
    uint32 width = 2;               // Surface width
    uint32 height = 3;              // Surface height
    PixelFormat format = 4;         // Surface pixel format
    RenderingBackend backend = 5;   // Rendering backend in use
    repeated SenaryPixel pixels = 6; // Surface pixel data
    map<string, string> properties = 7; // Surface properties
    bool hardware_accelerated = 8; // Hardware acceleration available
}

/**
 * Graphics primitive definition
 */
message GraphicsPrimitive {
    string primitive_id = 1;        // Unique primitive identifier
    PrimitiveType type = 2;         // Primitive type
    repeated SenaryPixel vertices = 3; // Primitive vertices
    SenaryColor fill_color = 4;     // Fill color
    SenaryColor stroke_color = 5;   // Stroke color
    uint32 stroke_width = 6;        // Stroke width
    map<string, string> attributes = 7; // Additional attributes
}

/**
 * Font and text rendering
 */
message SeigrFont {
    string font_id = 1;             // Unique font identifier
    string family_name = 2;         // Font family name
    uint32 size = 3;                // Font size in senary units
    bool bold = 4;                  // Bold weight
    bool italic = 5;                // Italic style
    SenaryColor color = 6;          // Text color
    bytes glyph_data = 7;           // Senary-optimized glyph data
    map<string, string> metadata = 8; // Font metadata
}

/**
 * Text rendering request
 */
message TextRender {
    string text = 1;                // Text to render
    SeigrFont font = 2;             // Font to use
    SenaryPixel position = 3;       // Text position
    uint32 max_width = 4;           // Maximum text width
    string alignment = 5;           // Text alignment
    map<string, string> options = 6; // Rendering options
}

// ===========================
// HARDWARE ABSTRACTION
// ===========================

/**
 * Hardware graphics capabilities
 */
message GraphicsCapabilities {
    string hardware_id = 1;         // Hardware identifier
    repeated RenderingBackend supported_backends = 2; // Supported backends
    repeated PixelFormat supported_formats = 3; // Supported pixel formats
    uint32 max_texture_size = 4;    // Maximum texture size
    uint32 max_framebuffer_size = 5; // Maximum framebuffer size
    bool hardware_acceleration = 6; // Hardware acceleration available
    float energy_efficiency = 7;    // Energy efficiency rating
    map<string, string> extensions = 8; // Hardware-specific extensions
}

/**
 * Display/output device information
 */
message DisplayDevice {
    string device_id = 1;           // Unique device identifier
    string device_name = 2;         // Human-readable device name
    uint32 width = 3;               // Display width
    uint32 height = 4;              // Display height
    uint32 refresh_rate = 5;        // Refresh rate in Hz
    PixelFormat native_format = 6;  // Native pixel format
    SenaryColorModel color_space = 7; // Native color space
    bool primary_display = 8;       // Primary display flag
    map<string, string> properties = 9; // Device properties
}

// ===========================
// RENDERING OPERATIONS
// ===========================

/**
 * Rendering command
 */
message RenderCommand {
    string command_id = 1;          // Unique command identifier
    string operation = 2;           // Rendering operation
    GraphicsSurface target = 3;     // Target surface
    repeated GraphicsPrimitive primitives = 4; // Primitives to render
    repeated TextRender text_renders = 5; // Text to render
    map<string, string> parameters = 6; // Command parameters
    seigr.protocol.timestamp.SeigrTimestamp timestamp = 7;
}

/**
 * Rendering pipeline configuration
 */
message RenderingPipeline {
    string pipeline_id = 1;         // Unique pipeline identifier
    RenderingBackend backend = 2;   // Rendering backend
    GraphicsCapabilities capabilities = 3; // Hardware capabilities
    repeated string shader_stages = 4; // Shader stages (if applicable)
    map<string, string> configuration = 5; // Pipeline configuration
    bool energy_optimized = 6;      // Energy optimization enabled
}

/**
 * Frame composition
 */
message FrameComposition {
    string frame_id = 1;            // Unique frame identifier
    uint32 width = 2;               // Frame width
    uint32 height = 3;              // Frame height
    repeated GraphicsSurface layers = 4; // Composition layers
    SenaryColor background = 5;     // Background color
    map<string, string> blend_modes = 6; // Layer blend modes
    seigr.protocol.timestamp.SeigrTimestamp timestamp = 7;
}

// ===========================
// ANIMATION AND EFFECTS
// ===========================

/**
 * Animation keyframe
 */
message AnimationKeyframe {
    float time = 1;                 // Keyframe time (0.0-1.0)
    SenaryColor color = 2;          // Color at this keyframe
    SenaryPixel position = 3;       // Position at this keyframe
    float scale = 4;                // Scale factor
    float rotation = 5;             // Rotation in senary degrees
    map<string, float> properties = 6; // Additional properties
}

/**
 * Animation definition
 */
message SeigrAnimation {
    string animation_id = 1;        // Unique animation identifier
    float duration = 2;             // Animation duration in seconds
    bool loop = 3;                  // Loop animation
    repeated AnimationKeyframe keyframes = 4; // Animation keyframes
    string easing_function = 5;     // Easing function name
    map<string, string> metadata = 6; // Animation metadata
}

// ===========================
// INPUT/OUTPUT CONVERSION
// ===========================

/**
 * External format conversion request
 */
message FormatConversion {
    string conversion_id = 1;       // Unique conversion identifier
    string source_format = 2;       // Source format (PNG, JPEG, etc.)
    bytes source_data = 3;          // Source image data
    PixelFormat target_format = 4;  // Target Seigr format
    SenaryColorModel target_model = 5; // Target color model
    map<string, string> options = 6; // Conversion options
    bool preserve_quality = 7;      // Preserve quality during conversion
}

/**
 * Conversion result
 */
message ConversionResult {
    string conversion_id = 1;       // Conversion identifier
    bool success = 2;               // Conversion success
    SeigrImage converted_image = 3; // Converted image (if successful)
    string error_message = 4;       // Error message (if failed)
    float quality_score = 5;        // Quality preservation score
    float energy_saved = 6;         // Energy saved through senary optimization
}

// ===========================
// GRAPHICS PROTOCOLS
// ===========================

/**
 * Graphics system initialization
 */
message GraphicsInitRequest {
    string system_id = 1;           // System identifier
    repeated string preferred_backends = 2; // Preferred rendering backends
    map<string, string> configuration = 3; // System configuration
    bool energy_mode = 4;           // Energy-conscious mode
}

/**
 * Graphics system status
 */
message GraphicsStatus {
    string system_id = 1;           // System identifier
    RenderingBackend active_backend = 2; // Active rendering backend
    GraphicsCapabilities capabilities = 3; // System capabilities
    repeated DisplayDevice displays = 4; // Connected displays
    float cpu_usage = 5;            // Graphics CPU usage
    float memory_usage = 6;         // Graphics memory usage
    float energy_consumption = 7;   // Energy consumption
    seigr.protocol.timestamp.SeigrTimestamp timestamp = 8;
}

/**
 * Graphics operation request
 */
message GraphicsRequest {
    string request_id = 1;          // Unique request identifier
    string operation = 2;           // Operation type
    map<string, string> parameters = 3; // Operation parameters
    bytes payload = 4;              // Operation payload
    uint32 priority = 5;            // Request priority (0-5 in senary)
    seigr.protocol.timestamp.SeigrTimestamp timestamp = 6;
}

/**
 * Graphics operation response
 */
message GraphicsResponse {
    string request_id = 1;          // Request identifier
    bool success = 2;               // Operation success
    bytes result_data = 3;          // Result data
    string error_message = 4;       // Error message (if failed)
    float execution_time = 5;       // Execution time in seconds
    float energy_used = 6;          // Energy consumed
    seigr.protocol.timestamp.SeigrTimestamp timestamp = 7;
}
