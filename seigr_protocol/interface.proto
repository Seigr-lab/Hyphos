syntax = "proto3";

package seigr.interface;

// ================================
// Seigr Interface Protocol
// ================================

// Interface operation types
enum InterfaceOperation {
    INTERFACE_UNKNOWN = 0;
    CREATE_INTERFACE = 1;
    DESTROY_INTERFACE = 2;
    UPDATE_INTERFACE = 3;
    RENDER_INTERFACE = 4;
    HANDLE_EVENT = 5;
    REGISTER_COMPONENT = 6;
    UNREGISTER_COMPONENT = 7;
    BIND_DATA = 8;
    VALIDATE_INPUT = 9;
    NAVIGATE = 10;
}

// Interface types
enum InterfaceType {
    INTERFACE_TYPE_UNKNOWN = 0;
    GUI = 1;                    // Graphical User Interface
    CLI = 2;                    // Command Line Interface  
    API = 3;                    // Application Programming Interface
    PROTOCOL = 4;               // Protocol Interface
    HARDWARE = 5;               // Hardware Interface
    NETWORK = 6;                // Network Interface
    ADAPTIVE = 7;               // Adaptive/AI Interface
}

// Component types
enum ComponentType {
    COMPONENT_UNKNOWN = 0;
    BUTTON = 1;
    TEXT_INPUT = 2;
    TEXT_DISPLAY = 3;
    IMAGE = 4;
    CONTAINER = 5;
    LIST = 6;
    MENU = 7;
    DIALOG = 8;
    CHART = 9;
    GRAPH = 10;
    SENARY_DISPLAY = 11;        // Senary number display
    ENERGY_METER = 12;          // Energy consumption display
}

// Event types
enum EventType {
    EVENT_UNKNOWN = 0;
    CLICK = 1;
    KEYPRESS = 2;
    MOUSE_OVER = 3;
    FOCUS = 4;
    BLUR = 5;
    CHANGE = 6;
    SUBMIT = 7;
    LOAD = 8;
    RESIZE = 9;
    SCROLL = 10;
}

// Interface component
message InterfaceComponent {
    string component_id = 1;
    ComponentType type = 2;
    string name = 3;
    Position position = 4;
    Dimensions size = 5;
    map<string, string> properties = 6;
    map<string, string> styles = 7;
    repeated InterfaceComponent children = 8;
    EventHandler event_handler = 9;
    bool is_visible = 10;
    bool is_enabled = 11;
}

// Position in interface
message Position {
    int32 x = 1;
    int32 y = 2;
    int32 z = 3;                // For 3D interfaces
    string units = 4;           // pixels, percent, etc.
}

// Dimensions
message Dimensions {
    uint32 width = 1;
    uint32 height = 2;
    uint32 depth = 3;           // For 3D interfaces
    string units = 4;
}

// Event handler
message EventHandler {
    EventType event_type = 1;
    string handler_function = 2;
    map<string, string> parameters = 3;
    bool prevent_default = 4;
    bool stop_propagation = 5;
}

// Interface layout
message InterfaceLayout {
    string layout_id = 1;
    string layout_type = 2;     // grid, flex, absolute, etc.
    repeated InterfaceComponent components = 3;
    LayoutConstraints constraints = 4;
    ResponseConfig responsive = 5;
    map<string, string> theme = 6;
}

// Layout constraints
message LayoutConstraints {
    uint32 min_width = 1;
    uint32 max_width = 2;
    uint32 min_height = 3;
    uint32 max_height = 4;
    string alignment = 5;
    string distribution = 6;
    uint32 spacing = 7;
    uint32 padding = 8;
}

// Responsive configuration
message ResponseConfig {
    repeated Breakpoint breakpoints = 1;
    bool auto_scale = 2;
    bool adaptive_layout = 3;
    bool energy_aware_rendering = 4;
}

// Responsive breakpoint
message Breakpoint {
    uint32 min_width = 1;
    uint32 max_width = 2;
    string layout_variant = 3;
    map<string, string> properties = 4;
}

// Interface theme
message InterfaceTheme {
    string theme_id = 1;
    string theme_name = 2;
    ColorPalette colors = 3;
    Typography typography = 4;
    map<string, string> custom_properties = 5;
    bool energy_optimized = 6;
    bool senary_themed = 7;
}

// Color palette
message ColorPalette {
    string primary_color = 1;
    string secondary_color = 2;
    string background_color = 3;
    string text_color = 4;
    string accent_color = 5;
    string error_color = 6;
    string warning_color = 7;
    string success_color = 8;
    map<string, string> custom_colors = 9;
}

// Typography settings
message Typography {
    string primary_font = 1;
    string secondary_font = 2;
    uint32 base_font_size = 3;
    double line_height = 4;
    map<string, FontStyle> font_styles = 5;
}

// Font style
message FontStyle {
    string font_family = 1;
    uint32 font_size = 2;
    string font_weight = 3;
    string font_style = 4;
    string color = 5;
}

// Interface event
message InterfaceEvent {
    string event_id = 1;
    EventType type = 2;
    string component_id = 3;
    map<string, string> data = 4;
    uint64 timestamp = 5;
    Position mouse_position = 6;
    repeated string key_modifiers = 7;
}

// Data binding
message DataBinding {
    string binding_id = 1;
    string component_id = 2;
    string data_source = 3;
    string data_path = 4;
    string binding_type = 5;    // one-way, two-way, one-time
    string transform_function = 6;
    bool auto_update = 7;
}

// Interface validation
message InterfaceValidation {
    string validation_id = 1;
    string component_id = 2;
    repeated ValidationRule rules = 3;
    string error_message = 4;
    bool is_valid = 5;
}

// Validation rule
message ValidationRule {
    string rule_type = 1;       // required, min_length, pattern, etc.
    string pattern = 2;
    string error_message = 3;
    map<string, string> parameters = 4;
}

// Interface request
message InterfaceRequest {
    InterfaceOperation operation = 1;
    string interface_id = 2;
    InterfaceLayout layout = 3;
    InterfaceComponent component = 4;
    InterfaceEvent event = 5;
    DataBinding binding = 6;
    map<string, string> parameters = 7;
}

// Interface response
message InterfaceResponse {
    bool success = 1;
    string message = 2;
    string interface_id = 3;
    bytes rendered_output = 4;
    InterfaceValidation validation = 5;
    repeated InterfaceEvent events = 6;
    uint64 response_time = 7;
}

// Interface service
service InterfaceService {
    rpc CreateInterface(InterfaceRequest) returns (InterfaceResponse);
    rpc DestroyInterface(InterfaceRequest) returns (InterfaceResponse);
    rpc UpdateInterface(InterfaceRequest) returns (InterfaceResponse);
    rpc RenderInterface(InterfaceRequest) returns (InterfaceResponse);
    rpc HandleEvent(InterfaceEvent) returns (InterfaceResponse);
    rpc RegisterComponent(InterfaceComponent) returns (InterfaceResponse);
    rpc UnregisterComponent(InterfaceRequest) returns (InterfaceResponse);
    rpc BindData(DataBinding) returns (InterfaceResponse);
    rpc ValidateInput(InterfaceValidation) returns (InterfaceResponse);
    rpc Navigate(InterfaceRequest) returns (InterfaceResponse);
}
