syntax = "proto3";

package seigr.crypto;

// ================================
// Seigr Native Cryptographic Protocol
// ================================

// Core cryptographic operations
enum CryptographicOperation {
    CRYPTO_UNKNOWN = 0;
    ENCRYPT = 1;
    DECRYPT = 2;
    SIGN = 3;
    VERIFY = 4;
    HASH = 5;
    KEY_GENERATE = 6;
    KEY_DERIVE = 7;
    KEY_EXCHANGE = 8;
}

// Cryptographic algorithms native to Seigr
enum CryptographicAlgorithm {
    ALGO_UNKNOWN = 0;
    SEIGR_HYPHA_CRYPT = 1;    // Primary Seigr encryption
    SEIGR_HASH_256 = 2;       // Native hash function
    SEIGR_SIGNATURE = 3;      // Native signing algorithm
    SEIGR_KEY_DERIVE = 4;     // Key derivation function
}

// Energy-aware threat levels
enum ThreatLevel {
    THREAT_UNKNOWN = 0;
    LOW = 1;
    MEDIUM = 2;
    HIGH = 3;
    CRITICAL = 4;
}

// Main cryptographic request message
message CryptographicRequest {
    CryptographicOperation operation = 1;
    bytes data = 2;
    map<string, string> parameters = 3;
    uint64 timestamp = 4;
    uint32 energy_budget = 5;
    ThreatLevel threat_level = 6;
}

// Key management
message KeyData {
    string key_id = 1;
    CryptographicAlgorithm algorithm = 2;
    bytes key_material = 3;
    KeyType key_type = 4;
    uint64 created_at = 5;
    uint64 expires_at = 6;
    map<string, string> metadata = 7;
}

enum KeyType {
    KEY_TYPE_UNKNOWN = 0;
    SYMMETRIC = 1;
    ASYMMETRIC_PUBLIC = 2;
    ASYMMETRIC_PRIVATE = 3;
    DERIVED = 4;
}

// Encrypted data container
message EncryptedData {
    CryptographicAlgorithm algorithm = 1;
    bytes ciphertext = 2;
    bytes initialization_vector = 3;
    string key_id = 4;
    uint64 encrypted_at = 5;
    map<string, string> metadata = 6;
}

// Digital signature
message DigitalSignature {
    CryptographicAlgorithm algorithm = 1;
    bytes signature = 2;
    string signer_id = 3;
    bytes signed_data_hash = 4;
    uint64 signed_at = 5;
}

// Hash computation result
message HashResult {
    CryptographicAlgorithm algorithm = 1;
    bytes hash_value = 2;
    bytes original_data = 3;
    uint32 salt_length = 4;
    uint64 computed_at = 5;
}

// Key generation parameters
message KeyGenerationParams {
    CryptographicAlgorithm algorithm = 1;
    uint32 key_length = 2;
    map<string, string> algorithm_params = 3;
    string purpose = 4;
    uint32 energy_limit = 5;
    uint64 performed_at = 6;
}

// Energy-aware cryptographic metrics
message CryptoEnergyMetrics {
    uint32 energy_consumed = 1;
    uint32 energy_budget = 2;
    uint32 efficiency_ratio = 3;
    uint32 computational_cost = 4;
    uint64 computed_at = 5;
}

// Threat assessment for adaptive security
message ThreatAssessment {
    ThreatLevel threat_level = 1;
    repeated string detected_patterns = 2;
    uint32 confidence_score = 3;
    string assessment_reason = 4;
    map<string, string> mitigations = 5;
}

// Cryptographic response
message CryptographicResponse {
    bool success = 1;
    string error_message = 2;
    bytes result_data = 3;
    CryptoEnergyMetrics energy_metrics = 4;
    ThreatAssessment threat_assessment = 5;
    uint64 performed_at = 6;
    map<string, string> metadata = 7;
}

// Verification result
message VerificationResult {
    bool is_valid = 1;
    string verification_method = 2;
    uint32 confidence_score = 3;
    string failure_reason = 4;
    uint64 verified_at = 5;
}

// Cryptographic service interface
service CryptographicService {
    rpc PerformCryptographicOperation(CryptographicRequest) returns (CryptographicResponse);
    rpc GenerateKey(KeyGenerationParams) returns (KeyData);
    rpc EncryptData(CryptographicRequest) returns (EncryptedData);
    rpc DecryptData(EncryptedData) returns (CryptographicResponse);
    rpc SignData(CryptographicRequest) returns (DigitalSignature);
    rpc VerifySignature(DigitalSignature) returns (VerificationResult);
    rpc ComputeHash(CryptographicRequest) returns (HashResult);
    rpc AssessThreat(CryptographicRequest) returns (ThreatAssessment);
    rpc GetEnergyMetrics(CryptographicRequest) returns (CryptoEnergyMetrics);
}
