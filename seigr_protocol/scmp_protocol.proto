syntax = "proto3";

package seigr.scmp;

import "network.proto";              // For NetworkProtocol, HyphenStatus, etc.
import "identity.proto";             // For Identity verification (VerificationLevel).
import "seigr_timestamp.proto"; // Required for Timestamp handling.

/**
 * Seigr Capsule Messaging Protocol (SCMP)
 *
 * Defines encrypted, structured, and decentralized messaging across Seigr Capsules.
 */

// ===========================
// ENUMS
// ===========================

/**
 * Defines SCMP message types for capsule-based communication.
 */
enum ScmpMessageType {
    SCMP_TYPE_UNDEFINED = 0;
    SCMP_TYPE_COMMAND = 1;
    SCMP_TYPE_DATA = 2;
    SCMP_TYPE_ACKNOWLEDGMENT = 3;
    SCMP_TYPE_ERROR = 4;
    SCMP_TYPE_SYNC_REQUEST = 5;
    SCMP_TYPE_STATUS_UPDATE = 6;
    SCMP_TYPE_NETWORK_DISCOVERY = 7;
    SCMP_TYPE_TUNNEL_REQUEST = 8;
    SCMP_TYPE_TUNNEL_RESPONSE = 9;
    SCMP_TYPE_ROUTE_NEGOTIATION = 10;
}

/**
 * Defines SCMP delivery priorities.
 */
enum ScmpPriority {
    SCMP_PRIORITY_UNDEFINED = 0;
    SCMP_PRIORITY_LOW = 1;
    SCMP_PRIORITY_MEDIUM = 2;
    SCMP_PRIORITY_HIGH = 3;
    SCMP_PRIORITY_CRITICAL = 4;
}

/**
 * Defines the status of a direct tunnel request.
 */
enum ScmpTunnelStatus {
    SCMP_TUNNEL_UNDEFINED = 0;
    SCMP_TUNNEL_PENDING = 1;
    SCMP_TUNNEL_ESTABLISHED = 2;
    SCMP_TUNNEL_REJECTED = 3;
    SCMP_TUNNEL_CLOSED = 4;
}

// ===========================
// CORE SCMP MESSAGES
// ===========================

/**
 * Encapsulated SCMP message containing payload, cryptographic verification, and trust metadata.
 */
message ScmpMessage {
    string capsule_id = 1;
    ScmpMessageType message_type = 2;
    seigr.network.NetworkProtocol protocol = 3;
    bytes encrypted_payload = 4;
    seigr.VerificationLevel sender_verification = 5; // Uses Seigr's verification level (identity.proto)
    string sender_id = 6;
    string recipient_id = 7;
    seigr.protocol.timestamp.SeigrTimestamp timestamp = 8;
    ScmpPriority priority = 9;
    bool requires_ack = 10;
    map<string, string> metadata = 11;
}

/**
 * Local Seigr network discovery message for multi-node self-organization.
 */
message ScmpNetworkDiscovery {
    string node_id = 1;
    repeated string known_peers = 2;
    seigr.protocol.timestamp.SeigrTimestamp timestamp = 3;
    map<string, string> metadata = 4;
}

/**
 * Request for a secure one-to-one tunnel between nodes.
 */
message ScmpTunnelRequest {
    string request_id = 1;
    string requester_id = 2;
    string target_id = 3;
    bytes encrypted_handshake = 4;
    seigr.protocol.timestamp.SeigrTimestamp timestamp = 5;
    map<string, string> metadata = 6;
}

/**
 * Response to a tunnel request, confirming or denying connection.
 */
message ScmpTunnelResponse {
    string request_id = 1;
    ScmpTunnelStatus status = 2;
    string target_id = 3;
    bytes encrypted_session_key = 4;
    seigr.protocol.timestamp.SeigrTimestamp timestamp = 5;
    map<string, string> metadata = 6;
}

/**
 * Message for route negotiation and dynamic path selection.
 */
message ScmpRouteNegotiation {
    string negotiation_id = 1;
    string sender_id = 2;
    string recipient_id = 3;
    repeated string proposed_routes = 4;
    map<string, float> trust_scores = 5;
    seigr.protocol.timestamp.SeigrTimestamp timestamp = 6;
    bool route_confirmed = 7;
    map<string, string> metadata = 8;
}
