syntax = "proto3";

package seigr.holographic;

// Holographic display capabilities and rendering
enum HolographicDisplayType {
    HOLOGRAPHIC_UNKNOWN = 0;
    VOLUMETRIC_3D = 1;
    LIGHT_FIELD = 2;
    HOLOGRAM_PROJECTION = 3;
    SPATIAL_AUGMENTED = 4;
    NEURAL_INTERFACE = 5;
}

// Holographic rendering quality levels
enum RenderingQuality {
    QUALITY_UNKNOWN = 0;
    LOW_ENERGY = 1;        // Senary-optimized for minimal power
    STANDARD = 2;
    HIGH_DEFINITION = 3;
    ULTRA_IMMERSIVE = 4;
    NEURAL_NATIVE = 5;     // Direct neural interface quality
}

// 3D coordinate system for holographic space
message HolographicCoordinate {
    float x = 1;
    float y = 2;
    float z = 3;
    float depth_intensity = 4;  // Holographic depth perception
    string coordinate_system = 5; // "cartesian", "spherical", "senary_optimized"
}

// Holographic object definition
message HolographicObject {
    string object_id = 1;
    HolographicCoordinate position = 2;
    HolographicCoordinate rotation = 3;
    HolographicCoordinate scale = 4;
    
    // Visual properties
    float opacity = 5;
    string material_type = 6;
    bytes texture_data = 7;
    
    // Interaction properties
    bool interactive = 8;
    repeated string interaction_types = 9; // "touch", "gaze", "neural", "gesture"
    
    // Energy and performance
    float energy_cost = 10;
    RenderingQuality required_quality = 11;
    
    // Metadata
    map<string, string> metadata = 12;
}

// Holographic scene definition
message HolographicScene {
    string scene_id = 1;
    string scene_name = 2;
    repeated HolographicObject objects = 3;
    
    // Environment settings
    string environment_type = 4; // "void", "room", "outdoor", "neural_space"
    float ambient_light = 5;
    HolographicCoordinate gravity_vector = 6;
    
    // Display configuration
    HolographicDisplayType display_type = 7;
    RenderingQuality target_quality = 8;
    
    // Performance optimization
    bool senary_optimized = 9;
    float energy_budget = 10;
    string optimization_profile = 11;
    
    // Temporal properties
    string creation_timestamp = 12;
    string last_modified = 13;
}

// Holographic rendering request
message HolographicRenderRequest {
    string scene_id = 1;
    HolographicDisplayType target_display = 2;
    RenderingQuality quality_level = 3;
    
    // Viewer configuration
    HolographicCoordinate viewer_position = 4;
    HolographicCoordinate viewer_orientation = 5;
    float field_of_view = 6;
    
    // Performance constraints
    float max_energy_consumption = 7;
    int32 max_render_time_ms = 8;
    bool force_senary_optimization = 9;
    
    // Rendering parameters
    map<string, string> render_parameters = 10;
}

// Holographic rendering response
message HolographicRenderResponse {
    bool success = 1;
    string error_message = 2;
    
    // Rendered output
    bytes rendered_data = 3;
    string data_format = 4; // "volumetric", "light_field", "neural_stream"
    
    // Performance metrics
    float actual_energy_consumption = 5;
    int32 render_time_ms = 6;
    RenderingQuality achieved_quality = 7;
    
    // Optimization results
    bool senary_optimized = 8;
    float optimization_efficiency = 9;
    
    // Metadata
    string timestamp = 10;
    map<string, string> metadata = 11;
}

// Holographic interaction event
message HolographicInteractionEvent {
    string event_id = 1;
    string object_id = 2;
    string interaction_type = 3; // "touch", "gaze", "neural", "gesture"
    
    // Interaction details
    HolographicCoordinate interaction_point = 4;
    float interaction_intensity = 5;
    string interaction_data = 6; // JSON or binary data
    
    // Temporal information
    string timestamp = 7;
    int64 duration_ms = 8;
    
    // User context
    string user_id = 9;
    string session_id = 10;
    
    // Response requirements
    bool requires_feedback = 11;
    string feedback_type = 12;
}

// Holographic display capabilities
message HolographicDisplayCapabilities {
    repeated HolographicDisplayType supported_types = 1;
    repeated RenderingQuality supported_qualities = 2;
    
    // Technical specifications
    float max_resolution_x = 3;
    float max_resolution_y = 4;
    float max_resolution_z = 5;
    float max_brightness = 6;
    int32 max_fps = 7;
    
    // Energy specifications
    float min_energy_consumption = 8;
    float max_energy_consumption = 9;
    bool senary_optimization_available = 10;
    
    // Interaction capabilities
    repeated string supported_interactions = 11;
    bool neural_interface_available = 12;
    
    // Performance characteristics
    int32 min_render_time_ms = 13;
    int32 max_render_time_ms = 14;
    float optimization_efficiency = 15;
}

// Holographic service definitions
service HolographicService {
    // Scene management
    rpc CreateScene(HolographicScene) returns (HolographicRenderResponse);
    rpc UpdateScene(HolographicScene) returns (HolographicRenderResponse);
    rpc DeleteScene(HolographicScene) returns (HolographicRenderResponse);
    
    // Rendering operations
    rpc RenderScene(HolographicRenderRequest) returns (HolographicRenderResponse);
    rpc RenderObject(HolographicObject) returns (HolographicRenderResponse);
    
    // Interaction handling
    rpc ProcessInteraction(HolographicInteractionEvent) returns (HolographicRenderResponse);
    
    // System capabilities
    rpc GetDisplayCapabilities(HolographicDisplayCapabilities) returns (HolographicDisplayCapabilities);
    
    // Performance optimization
    rpc OptimizeForSenary(HolographicScene) returns (HolographicScene);
    rpc CalculateEnergyRequirements(HolographicRenderRequest) returns (HolographicRenderResponse);
}
