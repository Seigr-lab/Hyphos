syntax = "proto3";

package hyphos.align;

import "hyphos/base_modules/consciousness_operations.hyph";
import "hyphos/base_modules/bio_digital_operations.hyph";
import "hyphos/base_modules/senary_mathematics.hyph";
import "hyphos/base_modules/energy_operations.hyph";
import "hyphos/base_modules/protocol_integration.hyph";
import "seigr_math.proto";
import "seigr_timestamp.proto";

// Align operation types (senary-mapped 0-5)
enum AlignOperation {
    ALIGN_UNKNOWN = 0;
    CREATE = 1;
    PROCESS = 2;
    VALIDATE = 3;
    OPTIMIZE = 4;
    INTEGRATE = 5;
}

// Align processing states (senary-mapped 0-5)
enum AlignProcessingState {
    STATE_IDLE = 0;
    STATE_ACTIVE = 1;
    STATE_PROCESSING = 2;
    STATE_OPTIMIZING = 3;
    STATE_INTEGRATING = 4;
    STATE_COMPLETE = 5;
}

// Align data types (senary-mapped 0-5)
enum AlignDataType {
    DATA_UNKNOWN = 0;
    DATA_INPUT = 1;
    DATA_OUTPUT = 2;
    DATA_INTERMEDIATE = 3;
    DATA_METADATA = 4;
    DATA_RESULT = 5;
}

// Core align messages
message AlignObject {
    string object_id = 1;
    AlignDataType data_type = 2;
    SenaryArray data_payload = 3;
    AlignProcessingState state = 4;
    SenaryTimestamp created_at = 5;
}

message AlignRequest {
    AlignOperation operation = 1;
    AlignObject target_object = 2;
    SenaryArray parameters = 3;
    AlignProcessingState desired_state = 4;
    SenaryTimestamp timestamp = 5;
}

message AlignResponse {
    bool success = 1;
    AlignObject result_object = 2;
    SenaryArray result_data = 3;
    AlignProcessingState new_state = 4;
    string error_message = 5;
}

// Align service definition
service AlignService {
    rpc Create(AlignRequest) returns (AlignResponse);
    rpc Process(AlignRequest) returns (AlignResponse);
    rpc Validate(AlignRequest) returns (AlignResponse);
    rpc Optimize(AlignRequest) returns (AlignResponse);
    rpc Integrate(AlignRequest) returns (AlignResponse);
}
