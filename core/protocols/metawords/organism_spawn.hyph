syntax = "proto3";

package hyphos.organism_spawn;

import "hyphos/base_modules/consciousness_operations.hyph";
import "hyphos/base_modules/bio_digital_operations.hyph";
import "hyphos/base_modules/senary_mathematics.hyph";
import "hyphos/base_modules/energy_operations.hyph";
import "hyphos/base_modules/protocol_integration.hyph";
import "seigr_math.proto";
import "seigr_timestamp.proto";

// Organism_spawn operation types (senary-mapped 0-5)
enum Organism_spawnOperation {
    ORGANISM_SPAWN_UNKNOWN = 0;
    CREATE = 1;
    PROCESS = 2;
    VALIDATE = 3;
    OPTIMIZE = 4;
    INTEGRATE = 5;
}

// Organism_spawn processing states (senary-mapped 0-5)
enum Organism_spawnProcessingState {
    STATE_IDLE = 0;
    STATE_ACTIVE = 1;
    STATE_PROCESSING = 2;
    STATE_OPTIMIZING = 3;
    STATE_INTEGRATING = 4;
    STATE_COMPLETE = 5;
}

// Organism_spawn data types (senary-mapped 0-5)
enum Organism_spawnDataType {
    DATA_UNKNOWN = 0;
    DATA_INPUT = 1;
    DATA_OUTPUT = 2;
    DATA_INTERMEDIATE = 3;
    DATA_METADATA = 4;
    DATA_RESULT = 5;
}

// Core organism_spawn messages
message Organism_spawnObject {
    string object_id = 1;
    Organism_spawnDataType data_type = 2;
    SenaryArray data_payload = 3;
    Organism_spawnProcessingState state = 4;
    SenaryTimestamp created_at = 5;
}

message Organism_spawnRequest {
    Organism_spawnOperation operation = 1;
    Organism_spawnObject target_object = 2;
    SenaryArray parameters = 3;
    Organism_spawnProcessingState desired_state = 4;
    SenaryTimestamp timestamp = 5;
}

message Organism_spawnResponse {
    bool success = 1;
    Organism_spawnObject result_object = 2;
    SenaryArray result_data = 3;
    Organism_spawnProcessingState new_state = 4;
    string error_message = 5;
}

// Organism_spawn service definition
service Organism_spawnService {
    rpc Create(Organism_spawnRequest) returns (Organism_spawnResponse);
    rpc Process(Organism_spawnRequest) returns (Organism_spawnResponse);
    rpc Validate(Organism_spawnRequest) returns (Organism_spawnResponse);
    rpc Optimize(Organism_spawnRequest) returns (Organism_spawnResponse);
    rpc Integrate(Organism_spawnRequest) returns (Organism_spawnResponse);
}
