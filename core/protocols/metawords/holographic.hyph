syntax = "proto3";

package hyphos.holographic;

import "hyphos/base_modules/consciousness_operations.hyph";
import "hyphos/base_modules/bio_digital_operations.hyph";
import "hyphos/base_modules/senary_mathematics.hyph";
import "hyphos/base_modules/energy_operations.hyph";
import "hyphos/base_modules/protocol_integration.hyph";
import "seigr_math.proto";
import "seigr_timestamp.proto";

// Holographic operation types (senary-mapped 0-5)
enum HolographicOperation {
    HOLOGRAPHIC_UNKNOWN = 0;
    CREATE = 1;
    PROCESS = 2;
    VALIDATE = 3;
    OPTIMIZE = 4;
    INTEGRATE = 5;
}

// Holographic processing states (senary-mapped 0-5)
enum HolographicProcessingState {
    STATE_IDLE = 0;
    STATE_ACTIVE = 1;
    STATE_PROCESSING = 2;
    STATE_OPTIMIZING = 3;
    STATE_INTEGRATING = 4;
    STATE_COMPLETE = 5;
}

// Holographic data types (senary-mapped 0-5)
enum HolographicDataType {
    DATA_UNKNOWN = 0;
    DATA_INPUT = 1;
    DATA_OUTPUT = 2;
    DATA_INTERMEDIATE = 3;
    DATA_METADATA = 4;
    DATA_RESULT = 5;
}

// Core holographic messages
message HolographicObject {
    string object_id = 1;
    HolographicDataType data_type = 2;
    SenaryArray data_payload = 3;
    HolographicProcessingState state = 4;
    SenaryTimestamp created_at = 5;
}

message HolographicRequest {
    HolographicOperation operation = 1;
    HolographicObject target_object = 2;
    SenaryArray parameters = 3;
    HolographicProcessingState desired_state = 4;
    SenaryTimestamp timestamp = 5;
}

message HolographicResponse {
    bool success = 1;
    HolographicObject result_object = 2;
    SenaryArray result_data = 3;
    HolographicProcessingState new_state = 4;
    string error_message = 5;
}

// Holographic service definition
service HolographicService {
    rpc Create(HolographicRequest) returns (HolographicResponse);
    rpc Process(HolographicRequest) returns (HolographicResponse);
    rpc Validate(HolographicRequest) returns (HolographicResponse);
    rpc Optimize(HolographicRequest) returns (HolographicResponse);
    rpc Integrate(HolographicRequest) returns (HolographicResponse);
}
