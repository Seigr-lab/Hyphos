syntax = "proto3";

package hyphos.frequency;

import "hyphos/base_modules/consciousness_operations.hyph";
import "hyphos/base_modules/bio_digital_operations.hyph";
import "hyphos/base_modules/senary_mathematics.hyph";
import "hyphos/base_modules/energy_operations.hyph";
import "hyphos/base_modules/protocol_integration.hyph";
import "seigr_math.proto";
import "seigr_timestamp.proto";

// Frequency operation types (senary-mapped 0-5)
enum FrequencyOperation {
    FREQUENCY_UNKNOWN = 0;
    CREATE = 1;
    PROCESS = 2;
    VALIDATE = 3;
    OPTIMIZE = 4;
    INTEGRATE = 5;
}

// Frequency processing states (senary-mapped 0-5)
enum FrequencyProcessingState {
    STATE_IDLE = 0;
    STATE_ACTIVE = 1;
    STATE_PROCESSING = 2;
    STATE_OPTIMIZING = 3;
    STATE_INTEGRATING = 4;
    STATE_COMPLETE = 5;
}

// Frequency data types (senary-mapped 0-5)
enum FrequencyDataType {
    DATA_UNKNOWN = 0;
    DATA_INPUT = 1;
    DATA_OUTPUT = 2;
    DATA_INTERMEDIATE = 3;
    DATA_METADATA = 4;
    DATA_RESULT = 5;
}

// Core frequency messages
message FrequencyObject {
    string object_id = 1;
    FrequencyDataType data_type = 2;
    SenaryArray data_payload = 3;
    FrequencyProcessingState state = 4;
    SenaryTimestamp created_at = 5;
}

message FrequencyRequest {
    FrequencyOperation operation = 1;
    FrequencyObject target_object = 2;
    SenaryArray parameters = 3;
    FrequencyProcessingState desired_state = 4;
    SenaryTimestamp timestamp = 5;
}

message FrequencyResponse {
    bool success = 1;
    FrequencyObject result_object = 2;
    SenaryArray result_data = 3;
    FrequencyProcessingState new_state = 4;
    string error_message = 5;
}

// Frequency service definition
service FrequencyService {
    rpc Create(FrequencyRequest) returns (FrequencyResponse);
    rpc Process(FrequencyRequest) returns (FrequencyResponse);
    rpc Validate(FrequencyRequest) returns (FrequencyResponse);
    rpc Optimize(FrequencyRequest) returns (FrequencyResponse);
    rpc Integrate(FrequencyRequest) returns (FrequencyResponse);
}
