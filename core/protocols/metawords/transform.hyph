syntax = "proto3";

package hyphos.transform;

import "hyphos/base_modules/consciousness_operations.hyph";
import "hyphos/base_modules/bio_digital_operations.hyph";
import "hyphos/base_modules/senary_mathematics.hyph";
import "hyphos/base_modules/energy_operations.hyph";
import "hyphos/base_modules/protocol_integration.hyph";
import "seigr_math.proto";
import "seigr_timestamp.proto";

// Transform operation types (senary-mapped 0-5)
enum TransformOperation {
    TRANSFORM_UNKNOWN = 0;
    CREATE = 1;
    PROCESS = 2;
    VALIDATE = 3;
    OPTIMIZE = 4;
    INTEGRATE = 5;
}

// Transform processing states (senary-mapped 0-5)
enum TransformProcessingState {
    STATE_IDLE = 0;
    STATE_ACTIVE = 1;
    STATE_PROCESSING = 2;
    STATE_OPTIMIZING = 3;
    STATE_INTEGRATING = 4;
    STATE_COMPLETE = 5;
}

// Transform data types (senary-mapped 0-5)
enum TransformDataType {
    DATA_UNKNOWN = 0;
    DATA_INPUT = 1;
    DATA_OUTPUT = 2;
    DATA_INTERMEDIATE = 3;
    DATA_METADATA = 4;
    DATA_RESULT = 5;
}

// Core transform messages
message TransformObject {
    string object_id = 1;
    TransformDataType data_type = 2;
    SenaryArray data_payload = 3;
    TransformProcessingState state = 4;
    SenaryTimestamp created_at = 5;
}

message TransformRequest {
    TransformOperation operation = 1;
    TransformObject target_object = 2;
    SenaryArray parameters = 3;
    TransformProcessingState desired_state = 4;
    SenaryTimestamp timestamp = 5;
}

message TransformResponse {
    bool success = 1;
    TransformObject result_object = 2;
    SenaryArray result_data = 3;
    TransformProcessingState new_state = 4;
    string error_message = 5;
}

// Transform service definition
service TransformService {
    rpc Create(TransformRequest) returns (TransformResponse);
    rpc Process(TransformRequest) returns (TransformResponse);
    rpc Validate(TransformRequest) returns (TransformResponse);
    rpc Optimize(TransformRequest) returns (TransformResponse);
    rpc Integrate(TransformRequest) returns (TransformResponse);
}
